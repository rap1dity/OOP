import asyncio
import collections
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types.message import ContentType
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery, ParseMode
from aiogram.utils import executor
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
import threading
import psycopg2
from itertools import groupby


CREDENTIALS_FILE = 'provinciabottestproject-1d4b7c3d0c96.json'
credentials = Credentials.from_service_account_file('provinciabottestproject-1d4b7c3d0c96.json', scopes=['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive'])
service = build('sheets', 'v4', credentials=credentials)
spreadsheetId = '1XbHmp2M04M2bsIaIRO1c7rxw-paDOct9B5-GahE7RWI'
bot = Bot(token='5474610554:AAFIsFI6ArPJmptuufE0kSSEGfnt4dfl1wI', parse_mode=types.ParseMode.MARKDOWN_V2)
PAYMENT_TOKEN = '410182388:LIVE:8ce102a6-6eb4-44e2-9cac-f84cfa5d77e0'
# live token -> 410182388:LIVE:74cc3263-ef7f-4d39-9053-4264397a4e38
# test token -> 401643678:TEST:875c0804-9a8e-46ba-925b-f99a2e12b398
# live work token -> 410182388:LIVE:8ce102a6-6eb4-44e2-9cac-f84cfa5d77e0
# test —é–∫–∞—Å—Å–∞ -> 381764678:TEST:43602
# bot token -> 5474610554:AAFIsFI6ArPJmptuufE0kSSEGfnt4dfl1wI
bot.parse_mode = 'HTML'
loop = asyncio.new_event_loop()
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)
connect = psycopg2.connect(dbname='usersdb', user='postgres',
                           password='123321', host='localhost')
cursor = connect.cursor()
this_month = datetime.today().date().month - 1
this_year = 2022
this_day = datetime.today().date().day - 1
work_shift = True
months = {"1": "–Ø–Ω–≤–∞—Ä—å-–§–µ–≤—Ä–∞–ª—å", "2": "–§–µ–≤—Ä–∞–ª—å-–ú–∞—Ä—Ç", "3": "–ú–∞—Ä—Ç-–ê–ø—Ä–µ–ª—å", "4": "–ê–ø—Ä–µ–ª—å-–ú–∞–π", "5": "–ú–∞–π-–ò—é–Ω—å", "6": "–ò—é–Ω—å-–ò—é–ª—å", "7": "–ò—é–ª—å-–ê–≤–≥—É—Å—Ç", "8": "–ê–≤–≥—É—Å—Ç-–°–µ–Ω—Ç—è–±—Ä—å", "9": "–°–µ–Ω—Ç—è–±—Ä—å-–û–∫—Ç—è–±—Ä—å", "10": "–û–∫—Ç—è–±—Ä—å-–ù–æ—è–±—Ä—å", "11": "–ù–æ—è–±—Ä—å-–î–µ–∫–∞–±—Ä—å", "12": "–î–µ–∫–∞–±—Ä—å-–Ø–Ω–≤–∞—Ä—å"}
list_name = f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ BurgerTek –ü–æ–ª—è—Ä–Ω—ã–π {months[f"{this_month}"]}'
cursor.execute("SELECT deliveryprice FROM tech_info")
delivery_price = cursor.fetchone()[0]
cursor.execute("SELECT interval FROM tech_info")
interval_time = cursor.fetchone()[0]
fifteenPercent = 0


class AddToMenu(StatesGroup):
    name = State()
    type = State()
    price = State()
    description = State()
    photo = State()


class ChangeDeliveryPrice(StatesGroup):
    newprice = State()


class Iamboss(StatesGroup):
    password = State()


class ChangeIntervalTime(StatesGroup):
    newinterval = State()


class ProfileInfo(StatesGroup):
    people = State()


class Decline(StatesGroup):
    reason = State()


class Help(StatesGroup):
    text = State()


class UserAddress(StatesGroup):
    text = State()


class Ivent(StatesGroup):
    format = State()
    amount = State()
    date = State()


class Time(StatesGroup):
    text = State()


class Comment(StatesGroup):
    text = State()


class Form(StatesGroup):
    name = State()
    phone = State()
    address = State()
    mail = State()


class Deletedata(StatesGroup):
    password = State()


class Review(StatesGroup):
    text = State()


def setInterval(interval):
    def decorator(function):
        def wrapper(*args, **kwargs):
            stopped = threading.Event()
            def loop(): # executed in another thread
                while not stopped.wait(interval): # until stopped
                    function(*args, **kwargs)
            t = threading.Thread(target=loop)
            t.daemon = True # stop if the program exits
            t.start()
            return stopped
        return wrapper
    return decorator


@setInterval(60)
def printer():
    cursor.execute(f"SELECT ID FROM orders WHERE StartCooking='{datetime.now().strftime('%H:%M')}' AND deliveryType=0")
    users_orders = cursor.fetchall()
    if len(users_orders) > 0:
        for i in range(len(users_orders)):
            cursor.execute(f"UPDATE orders SET deliveryType='1' WHERE ID={users_orders[i][0]}")
            connect.commit()


stop = printer()


@dp.message_handler(chat_type='private', commands=['start'])
async def start(message: types.Message):
    await message.answer(
        f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø - –ë–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –≤ ‚ÄúBurgerTek‚Äù. –Ø –ø–æ–º–æ–≥—É –í–∞–º –∑–∞–∫–∞–∑–∞—Ç—å –ª—é–±–∏–º—É—é –µ–¥—É, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤,"
        f" –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.", parse_mode=ParseMode.HTML)
    cursor.execute(f"SELECT * FROM login_id WHERE ID={message.chat.id}")
    temp = cursor.fetchone()
    if temp:
        await hello_menu(message)
    else:
        await Form.name.set()
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ö–∞–∫ –∫ –í–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?‚¨á")


@dp.message_handler(chat_type='private', commands='Iambosshere')
async def Iambosshere(message: types.Message):
    await Iamboss.password.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.')


@dp.message_handler(state=Iamboss.password)
async def bosspassword(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['pass'] = message.text
    await state.finish()
    if data['pass'] == '177355':
        cursor.execute(f"UPDATE login_id SET Role=4 WHERE ID={message.chat.id}")
        connect.commit()
        await message.answer('–¢–µ–ø–µ—Ä—å –í—ã —Ç—É—Ç Big Boss')
        await boss_menu(message)
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å(')


@dp.message_handler(state=Form.name)
async def reg_ph(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await Form.next()
    await message.answer(f"–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –≠—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—à–∏–º –∫—É—Ä—å–µ—Ä–∞–º.‚¨á", parse_mode=ParseMode.HTML)


@dp.message_handler(lambda message: message.text, state=Form.phone)
async def process_age(message: types.Message, state: FSMContext):
    await Form.next()
    await state.update_data(phone=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏‚¨á")


@dp.message_handler(state=Form.address)
async def process_address(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['addres'] = message.text
    await Form.next()
    await message.answer("–°—É–ø–µ—Ä! –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ, –í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –≠—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª‚¨á", parse_mode=ParseMode.HTML)


@dp.message_handler(state=Form.mail)
async def enter_mail(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['mail'] = message.text
        cursor.execute(f"INSERT INTO login_id (ID, –ò–º—è, –¢–µ–ª–µ—Ñ–æ–Ω, –ê–¥—Ä–µ—Å, role, –ü–æ—á—Ç–∞) VALUES ({message.chat.id},'{data['name']}','{data['phone']}','{data['addres']}',0,'{data['mail']}')")
        connect.commit()
        cursor.execute(f"INSERT INTO cart_data VALUES({message.chat.id},'–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç','–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç','–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç','–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç','–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç','–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç','–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',0)")
        connect.commit()
    await state.finish()
    await hello_menu(message)


@dp.message_handler(Text(equals='–í –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é‚Ü©'), chat_type='private')
async def hello_menu(message: types.Message):
    cursor.execute(f"SELECT menuStatus FROM login_id WHERE ID='{message.chat.id}'")
    if cursor.fetchone()[0] == '1':
        cursor.execute(f"SELECT menuMessage FROM login_id WHERE ID='{message.chat.id}'")
        user_message = cursor.fetchone()[0].split(',')
        for i in range(len(user_message)):
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=int(user_message[i]))
            except:
                pass
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤ üéâ', callback_data='order_ivent'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã üìù', callback_data=f'our_reviews'))
    keyboard.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìç', callback_data='main__menu'))
    keyboard.add(types.InlineKeyboardButton('–°–∫–∞—á–∞—Ç—å –º–µ–Ω—é –≤ pdf üì•', callback_data='download_pdf'))
    sended_message = await message.answer("–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.\n–ù–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: 89318010002\n–ù–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –≥. –ü–æ–ª—è—Ä–Ω—ã–π, —É–ª. –ì–∞–¥–∂–∏–µ–≤–∞, 11,–≤–æ–∑–ª–µ –¢–¶ –ö–æ—Ä–æ–≤–Ω–∏–∫."
                                          "\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ üòã", reply_markup=keyboard)
    cursor.execute(
        f"UPDATE login_id SET menuStatus='1', menuMessage='{sended_message.message_id}' WHERE ID='{message.chat.id}'")
    connect.commit()


@dp.callback_query_handler(Text(equals='download_pdf'))
async def down_pdf(callback: types.CallbackQuery):
    doc = open('photo_5257953780887043451_y.pdf', 'rb')
    await bot.send_document(chat_id=callback.message.chat.id, document=doc)


@dp.callback_query_handler(Text(equals='order_ivent'))
async def order__ivent(callback: types.CallbackQuery):
    global work_shift
    cursor.execute(f"SELECT –ò–º—è FROM login_id WHERE ID={callback.message.chat.id}")
    ban_or_not = cursor.fetchone()
    if ban_or_not[0] == 'Banned':
        await callback.message.answer('–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã')
    else:
        await callback.message.delete()
        await Ivent.format.set()
        await callback.message.answer('–ù–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –∫–µ–π—Ç–µ—Ä–∏–Ω–≥–∞ –¥–ª—è –í–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤. –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —É—Å–ª—É–≥–æ–π, —É–∫–∞–∂–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è‚¨á')


@dp.message_handler(state=Ivent.format)
async def give_format(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['format'] = message.text
    await Ivent.next()
    await message.answer('–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –æ–∂–∏–¥–∞–µ—Ç—Å—è?‚¨á')


@dp.message_handler(state=Ivent.amount)
async def give_amount(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['amount'] = message.text
    await Ivent.next()
    await message.answer('–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?‚¨á')


@dp.message_handler(state=Ivent.date)
async def give_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['date'] = message.text
    await state.finish()
    cursor.execute(f"SELECT –¢–µ–ª–µ—Ñ–æ–Ω FROM login_id WHERE ID={message.chat.id}")
    tmp = cursor.fetchone()
    await bot.send_message(-1001547432335, f"–ë—ã–ª –∑–∞–∫–∞–∑–∞–Ω –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤.\n–§–æ—Ä–º–∞—Ç: {data['format']}\n"
                                       f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {data['amount']}\n–î–∞—Ç–∞: {data['date']}\n–ù–æ–º–µ—Ä: {tmp[0]}")
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤ üéâ', callback_data='order_ivent'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã üìù', callback_data=f'our_reviews'))
    keyboard.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìç', callback_data='main__menu'))
    keyboard.add(types.InlineKeyboardButton('–°–∫–∞—á–∞—Ç—å –º–µ–Ω—é –≤ pdf üì•', callback_data='download_pdf'))
    sended_message = await message.answer('–û—Ç–ª–∏—á–Ω–æ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä @–Ω–∏–∫, —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.', reply_markup=keyboard)
    cursor.execute(
        f"UPDATE login_id SET menuStatus='1', menuMessage='{sended_message.message_id}' WHERE ID='{message.chat.id}'")
    connect.commit()


@dp.callback_query_handler(Text(equals='main__menu'))
async def to_main_menu(callback: types.CallbackQuery):
    await callback.message.delete()
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    await main_menu(callback.message)


@dp.message_handler(Text(equals='–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞üÜò'), chat_type='private')
async def support(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton('–ü–æ–∑–≤–æ–Ω—é', callback_data='calltosupport'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–ø–∏—à—É —Ç–µ–∫—Å—Ç–æ–º', callback_data='texttosupport'))
    await message.answer('–ú—ã —Å–æ–∂–∞–ª–µ–µ–º –æ —Ç–æ–º, —á—Ç–æ –í–∞–º –ø—Ä–∏—à–ª–æ—Å—å —Å—Ç–æ–ª–∫–Ω—É—Ç—å—Å—è —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏.'
                         ' –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 89318010002 –∏–ª–∏ –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏.', reply_markup=keyboard)


@dp.callback_query_handler(Text(equals='calltosupport'))
async def calltosupport(callback: types.CallbackQuery):
    await callback.message.answer('–ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—à –∑–≤–æ–Ω–æ–∫.')
    await asyncio.sleep(1.5)
    await callback.message.edit_text('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. 3')
    await asyncio.sleep(1)
    await callback.message.edit_text('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. 2')
    await asyncio.sleep(1)
    await callback.message.edit_text('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. 1')
    await asyncio.sleep(1)
    await callback.message.delete()
    await main_menu(callback.message)


@dp.callback_query_handler(Text(equals='texttosupport'))
async def texttosupport(callback: types.CallbackQuery):
    await Help.text.set()
    await asyncio.sleep(0.5)
    await callback.message.answer('–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –Ω–∏–∂–µ‚¨á')


@dp.message_handler(state=Help.text)
async def after_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
    await asyncio.sleep(0.5)
    await state.finish()
    async with state.proxy() as tekst:
        tekst['ttt'] = data['text']
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton('–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É', callback_data=f"support_conn –¢–µ–ª–µ—Ñ–æ–Ω"))
    keyboard.add(types.InlineKeyboardButton('–ü–æ –ø–æ—á—Ç–µ', callback_data=f"support_conn –ü–æ—á—Ç–∞"))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ —Å –≤–∞–º–∏ –ª—É—á—à–µ —Å–≤—è–∑–∞—Ç—å—Å—è: ', reply_markup=keyboard)
    cursor.execute(
        f"UPDATE login_id SET menuStatus='1', menuMessage='{message.message_id + 1}' WHERE ID='{message.chat.id}'")
    connect.commit()


@dp.callback_query_handler(Text(startswith='support_conn'))
async def send_to_chat(callback: types.CallbackQuery, state: FSMContext):
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    async with state.proxy() as tekst:
        text = tekst['ttt']
    temp = callback.data.split(' ')[1]
    cursor.execute(f"SELECT {temp}, –ò–º—è FROM login_id WHERE ID={callback.message.chat.id}")
    tmp = cursor.fetchone()
    await bot.send_message(-1001547432335, f'–ü—Ä–∏—à—ë–ª –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:'
                                      f'{callback.message.chat.id}\n–ò–º—è: {tmp[1]}\n–¢–µ–∫—Å—Ç:\n' + text +
                           '\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–æ—Å–∏–ª —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º —Å –ø–æ–º–æ—â—å—é: \n' + temp +
                           f"\n{tmp[0]}")
    await state.finish()
    await asyncio.sleep(0.5)
    await callback.message.edit_text('–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.  –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ, –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @–Ω–∏–∫ –Ω–∞–ø—Ä—è–º—É—é. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!')
    await main_menu(callback.message)


@dp.callback_query_handler(Text(startswith='info_changer'))
async def process_callback_add(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await ProfileInfo.people.set()
    if callback.data.split(' ')[1] != '–ü–æ—á—Ç–∞':
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ {callback.data.split(' ')[1]}")
        await callback.answer()
    else:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ü–æ—á—Ç—É")
        await callback.answer()
    async with state.proxy() as parametr:
        parametr['change'] = callback.data.split(' ')[1]


@dp.message_handler(Text(equals='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å‚úè'), chat_type='private')
async def change_profile(message: types.Message):
    cursor.execute(f"SELECT menuStatus FROM login_id WHERE ID='{message.chat.id}'")
    if cursor.fetchone()[0] == '1' and message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å‚úè':
        cursor.execute(f"SELECT menuMessage FROM login_id WHERE ID='{message.chat.id}'")
        user_message = cursor.fetchone()[0].split(',')
        for i in range(len(user_message)):
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=int(user_message[i]))
            except:
                pass
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    info = ['–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ê–¥—Ä–µ—Å', '–ü–æ—á—Ç–∞']
    buttons = []
    cursor.execute(f"SELECT –ò–º—è, –¢–µ–ª–µ—Ñ–æ–Ω, –ê–¥—Ä–µ—Å, –ü–æ—á—Ç–∞ FROM login_id WHERE ID={message.chat.id}")
    tmp = cursor.fetchone()
    for i in range(len(tmp)):
        buttons.append(types.InlineKeyboardButton(f"{info[i]}: {tmp[i]}",
                                                  callback_data=f"info_changer {info[i]} {message.chat.id}"))
    buttons.append(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="info_back"))
    keyboard.add(*buttons)
    sended_message = await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è", reply_markup=keyboard)
    cursor.execute(
        f"UPDATE login_id SET menuStatus='1', menuMessage='{sended_message.message_id}' WHERE ID='{message.chat.id}'")
    connect.commit()


@dp.callback_query_handler(Text(equals="info_back"))
async def process_callback_result(callback: types.CallbackQuery):
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    await callback.message.delete()
    await main_menu(callback.message)
    await callback.answer()


@dp.message_handler(state=ProfileInfo.people)
async def info_changer(message: types.Message, state: FSMContext):
    async with state.proxy() as parametr:
        text = parametr['change']
    await state.finish()
    async with state.proxy() as data:
        data['text'] = message.text
    cursor.execute(f"UPDATE login_id SET {text}='{data['text']}' WHERE ID='{message.chat.id}'")
    connect.commit()
    await state.finish()
    await message.answer('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã')


@dp.message_handler(Text(equals='–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞üîç'), chat_type='private')
async def check_status(message: types.Message):
    cursor.execute(f"SELECT ID, Status, List FROM orders WHERE User_ID={message.chat.id} AND Status!='–ó–∞–≤–µ—Ä—à—ë–Ω' AND Status!='–û—Ç–º–µ–Ω—ë–Ω'")
    orders = cursor.fetchall()
    if orders:
        temp = []
        stroka = ''
        for j in range(len(orders)):
            temp.append(orders[j][2])
        spisok = [el for el, _ in groupby(temp)]
        for z in range (len(spisok)):
            stroka = stroka + '\n' + f'{z}. ' + str(spisok[z]) + ' - ' + str(collections.Counter(spisok)[f'{spisok[z]}']) + ' —à—Ç.'
        for i in range(len(orders)):
            text = interval_time
            await asyncio.sleep(0.5)
            await message.answer(f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {orders[i][0]}\n–ó–∞–∫–∞–∑: {stroka}\n–°—Ç–∞—Ç—É—Å: {orders[i][1]}\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ {text} –º–∏–Ω—É—Ç')
    else:
        await message.answer('–£ –≤–∞—Å —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤')


@dp.message_handler(chat_type='private', commands='givemerole')
async def give_role(message: types.Message):
    cursor.execute(f"UPDATE login_id SET Role=-1 WHERE ID={message.chat.id}")
    connect.commit()
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª.")


@dp.callback_query_handler(Text(equals='add_to_menu'))
async def add_to_menu(callback: types.CallbackQuery):
    await callback.message.delete()
    cursor.execute(f"SELECT Role FROM login_id WHERE ID={callback.message.chat.id}")
    role = cursor.fetchone()
    if role[0] == 4:
        await AddToMenu.name.set()
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –±–ª—é–¥–∞')
    else:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞(")


@dp.message_handler(state=AddToMenu.name)
async def take_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await AddToMenu.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –±–ª—é–¥–∞.')


@dp.message_handler(state=AddToMenu.type)
async def take_type(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['type'] = message.text
    await AddToMenu.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞.')


@dp.message_handler(state=AddToMenu.price)
async def take_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = float(message.text)
    await AddToMenu.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞')


@dp.message_handler(state=AddToMenu.description)
async def take_desc(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['desc'] = message.text
    await AddToMenu.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–ª—é–¥–∞')


@dp.message_handler(state=AddToMenu.photo, content_types='photo')
async def take_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        photo_id = message.photo[0].file_id
        data['photo'] = photo_id
    await state.finish()
    cursor.execute(f"INSERT INTO menu (Name, Price, Type, Photo, Description) VALUES ('{data['name']}','{data['price']}','{data['type']}','{data['photo']}','{data['desc']}')")
    connect.commit()
    await message.answer('–ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{message.chat.id}'")
    connect.commit()
    await boss_menu(message)


@dp.callback_query_handler(Text(equals='delete__from_menu'))
async def delete_from_menu_types(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass
    cursor.execute(f"SELECT menuStatus FROM login_id WHERE ID='{callback.message.chat.id}'")
    status = cursor.fetchone()[0]
    cursor.execute("SELECT DISTINCT Type FROM menu")
    tmp = cursor.fetchall()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i in range(len(tmp)):
        keyboard.add(types.InlineKeyboardButton(tmp[i][0], callback_data=f"delete_from_menu_types {tmp[i][0]}"))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data='back_to_boss'))
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)
    if status == '1' and callback.message.text == '–ú–µ–Ω—éüçΩ':
        cursor.execute(f"SELECT menuMessage FROM login_id WHERE ID='{callback.message.chat.id}'")
        user_message = cursor.fetchone()[0].split(',')
        for i in range(len(user_message)):
            try:
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=int(user_message[i]))
            except:
                pass
    cursor.execute(
        f"UPDATE login_id SET menuStatus='1', menuMessage='{callback.message.message_id + 1}' WHERE ID='{callback.message.chat.id}'")
    connect.commit()


@dp.callback_query_handler(Text(startswith='delete_from_menu_types'))
async def delete_from_menu_choise(callback: types.CallbackQuery, state: FSMContext):
    name = callback.data.split(' ')[1]
    cursor.execute(f"SELECT Name,ID FROM menu WHERE Type='{name}'")
    tmp = cursor.fetchall()
    async with state.proxy() as data:
        data['type'] = name
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i in range(len(tmp)):
        keyboard.add(types.InlineKeyboardButton(tmp[i][0], callback_data=f"delete_item {tmp[i][1]}"))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data="types_to_delete_return"))
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–µ –±–ª—é–¥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.', reply_markup=keyboard)
    cursor.execute(f"UPDATE login_id SET menuMessage='{callback.message.message_id}' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    await callback.answer()


@dp.callback_query_handler(Text(startswith='types_to_delete_return'))
async def go_back_to_delete(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy():
        await state.finish()
    await callback.answer('–í—ã –±—ã–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –Ω–∞–∑–∞–¥.')
    await callback.message.delete()
    await delete_from_menu_types(callback)


@dp.message_handler(chat_type='private', commands='Bossmenu')
async def boss_menu(message: types.Message):
    cursor.execute(f"SELECT Role FROM login_id WHERE ID={message.chat.id}")
    role = cursor.fetchone()
    if role[0] == 4:
        cursor.execute(f"SELECT menuStatus FROM login_id WHERE ID='{message.chat.id}'")
        status = cursor.fetchone()[0]
        if status == '1' and message.text.lower() == '/bossmenu':
            cursor.execute(f"SELECT menuMessage FROM login_id WHERE ID='{message.chat.id}'")
            user_message = cursor.fetchone()[0].split(',')
            for i in range(len(user_message)):
                try:
                    await bot.delete_message(chat_id=message.chat.id, message_id=int(user_message[i]))
                except:
                    pass
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ –∏–∑ –º–µ–Ω—é', callback_data='delete__from_menu'))
        keyboard.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ –≤ –º–µ–Ω—é', callback_data='add_to_menu'))
        keyboard.add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='cancel_order'))
        keyboard.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —Å—Ä–µ–¥–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞', callback_data='take_user'))
        keyboard.add(types.InlineKeyboardButton('–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='ban_user'))
        keyboard.add(types.InlineKeyboardButton('–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='shortstat'))
        keyboard.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É –¥–æ—Å—Ç–∞–≤–∫–∏', callback_data='change_delivery_price'))
        keyboard.add(types.InlineKeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç–æ–π', callback_data='ban_payment_type'))
        keyboard.add(types.InlineKeyboardButton('–ü—Ä–æ–º–æ–∞–∫—Ü–∏–∏', callback_data='promo_list'))
        keyboard.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏', callback_data='change_interval'))
        sended_message = await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é.', reply_markup=keyboard)
        cursor.execute(
            f"UPDATE login_id SET menuStatus='1', menuMessage='{sended_message.message_id}' WHERE ID='{message.chat.id}'")
        connect.commit()
    else:
        await message.answer('—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')


@dp.callback_query_handler(Text(equals='change_interval'))
async def change_interval(callback: types.CallbackQuery):
    await callback.message.delete()
    await ChangeIntervalTime.newinterval.set()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–∏–Ω—É—Ç–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ xx-xx (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –º–∏–Ω—É—Ç)')


@dp.message_handler(state=ChangeIntervalTime.newinterval)
async def new_interval_time(message: types.Message, state: FSMContext):
    global interval_time
    async with state.proxy() as data:
        data['newinterval'] = message.text
    cursor.execute(f"UPDATE tech_info SET interval='{data['newinterval']}' WHERE interval='{interval_time}'")
    connect.commit()
    interval_time = str(data['newinterval'])
    await state.finish()
    await message.answer('–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω')


@dp.callback_query_handler(Text(startswith='ban_type '))
async def ban_type(callback: types.CallbackQuery):
    banType = callback.data.split(' ')[1]
    cursor.execute(f"SELECT available FROM payments WHERE name='{banType}'")
    access = cursor.fetchone()[0]
    if access is False:
        cursor.execute(f"UPDATE payments SET available={True} WHERE name='{banType}'")
    else:
        cursor.execute(f"UPDATE payments SET available={False} WHERE name='{banType}'")
    connect.commit()
    await callback.answer('–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')
    await callback.message.delete()
    await boss_menu(callback.message)


@dp.callback_query_handler(Text(equals='ban_payment_type'))
async def ban_payment_type(callback: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton('–ö–∞—Ä—Ç–æ–π –Ω–∞ –º–µ—Å—Ç–µ', callback_data='ban_type cardonplace'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É', callback_data='ban_type cashoncurier'))
    keyboard.add(types.InlineKeyboardButton('–ö–∞—Ä—Ç–æ–π –∫—É—Ä—å–µ—Ä—É', callback_data='ban_type cardoncurier'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞ –º–µ—Å—Ç–µ', callback_data='ban_type cashonplace'))
    keyboard.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É', callback_data='ban_type cardtransfer'))
    keyboard.add(types.InlineKeyboardButton('–ö–∞—Ä—Ç–æ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ', callback_data='ban_type cardintelegram'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data="promo_list_back"))
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(Text(equals='promo_list'))
async def promo_list(callback: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton('–°–∫–∏–¥–∫–∞ 15% –Ω–∞ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞', callback_data="promo_list 1"))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data="promo_list_back"))
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∞–∫—Ü–∏—é –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–æ—Ç–º–µ–Ω—ã', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(Text(startswith='promo_list '))
async def promo_list_activate(callback: types.CallbackQuery):
    promo_num = callback.data.split(' ')[1]
    global fifteenPercent
    if promo_num == '1':
        fifteenPercent = 1 if fifteenPercent == 0 else 0
    await callback.answer('–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
    await callback.message.delete()
    await boss_menu(callback.message)


@dp.callback_query_handler(Text(equals='promo_list_back'))
async def promo_list_back(callback: types.CallbackQuery):
    await callback.message.delete()
    await boss_menu(callback.message)


@dp.callback_query_handler(Text(equals='change_delivery_price'))
async def change_delivery_price(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass
    await ChangeDeliveryPrice.newprice.set()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏.')


@dp.message_handler(state=ChangeDeliveryPrice.newprice)
async def take_new_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['newprice'] = message.text
    global delivery_price
    cursor.execute(f"UPDATE tech_info SET deliveryprice={int(data['newprice'])} WHERE deliveryprice={delivery_price}")
    connect.commit()
    delivery_price = int(data['newprice'])
    await state.finish()
    await message.answer('–°—É–º–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞')
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{message.chat.id}'")
    connect.commit()


@dp.callback_query_handler(Text(equals='shortstat'))
async def show_short_stat(callback: types.CallbackQuery):
    cursor.execute(f"SELECT Price, Status, –°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã FROM orders")
    info = cursor.fetchall()
    cancels_amount = 0
    money = 0
    for i in range(len(info)):
        if info[i][1] == '–û—Ç–º–µ–Ω—ë–Ω':
            cancels_amount += 1
        if info[i][2] == '–û–ø–ª–∞—á–µ–Ω' and info[i][1] != '–û—Ç–º–µ–Ω—ë–Ω':
            money += info[i][0]
    await callback.message.edit_text(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {len(info)}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∏–∑ –Ω–∏—Ö: {cancels_amount}, –í—ã—Ä—É—á–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {money} —Ä—É–±–ª–µ–π.')
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    await boss_menu(callback.message)


@dp.callback_query_handler(Text(equals='ban_user'))
async def choose_user_for_ban(callback: types.CallbackQuery):
    cursor.execute("SELECT ID, CancelOrders, –ò–º—è FROM login_id WHERE CancelOrders>4")
    abuser_info = cursor.fetchall()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i in range(len(abuser_info)):
        keyboard.add(types.InlineKeyboardButton(f'ID: {abuser_info[i][0]}, –ö–æ–ª-–≤–æ –æ—Ç–º–µ–Ω: {abuser_info[i][1]}, –ò–º—è: {abuser_info[i][2]}', callback_data=f'to_black_list {abuser_info[i][0]}'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data='back_to_boss'))
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å.', reply_markup=keyboard)


@dp.callback_query_handler(Text(equals='back_to_boss'))
async def back_to_boss(callback: types.CallbackQuery):
    await callback.message.delete()
    await boss_menu(callback.message)


@dp.callback_query_handler(Text(startswith='to_black_list'))
async def handle_ban_command(callback: types.CallbackQuery):
    abuser_id = callback.data.split(" ")[1]
    cursor.execute(f"UPDATE login_id SET –ò–º—è='Banned' WHERE ID={abuser_id}")
    connect.commit()
    await callback.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {abuser_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    await boss_menu(callback.message)


@dp.callback_query_handler(Text(equals='take_user'))
async def take__user(callback: types.CallbackQuery):
    cursor.execute(f"SELECT Role FROM login_id WHERE ID={callback.message.chat.id}")
    this_user_role = cursor.fetchone()
    if this_user_role[0] == 4:
        cursor.execute("SELECT ID, –ò–º—è, Role FROM login_id WHERE Role!=0")
    else:
        cursor.execute("SELECT ID, –ò–º—è, Role FROM login_id WHERE Role!=0 AND Role < 4")
    personal_info = cursor.fetchall()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i in range(len(personal_info)):
        if personal_info[i][2] == 1:
            Role = '–ö—É—Ä—å–µ—Ä'
        elif personal_info[i][2] == 2:
            Role = '–ü–æ–≤–∞—Ä'
        elif personal_info[i][2] == 4:
            Role = 'BIG BOSS'
        else:
            Role = '–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–¥–∞—á—É'
        keyboard.add(types.InlineKeyboardButton(f'–ò–º—è: {personal_info[i][1]}, –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {Role}', callback_data=f'choose_user {personal_info[i][0]} {this_user_role[0]}'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data='back_to_boss'))
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏.', reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith='choose_user'))
async def take_role(callback: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.', callback_data=f'change_role {callback.data.split(" ")[1]} 0'))
    keyboard.add(types.InlineKeyboardButton('–ö—É—Ä—å–µ—Ä.', callback_data=f'change_role {callback.data.split(" ")[1]} 1'))
    keyboard.add(types.InlineKeyboardButton('–ü–æ–≤–∞—Ä.', callback_data=f'change_role {callback.data.split(" ")[1]} 2'))
    keyboard.add(types.InlineKeyboardButton('BIG BOSS.', callback_data=f'change_role {callback.data.split(" ")[1]} 4'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data=f'back_to_change_user_for_roles'))
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å.', reply_markup=keyboard)


@dp.callback_query_handler(Text(equals='back_to_change_user_for_roles'))
async def back_to_boss_menu(callback: types.CallbackQuery):
    await take__user(callback)


@dp.callback_query_handler(Text(startswith='change_role'))
async def change__role(callback: types.CallbackQuery):
    cursor.execute(f"UPDATE login_ID SET Role={callback.data.split(' ')[2]} WHERE ID={callback.data.split(' ')[1]}")
    connect.commit()
    await callback.message.edit_text(f'–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.data.split(" ")[1]} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞')
    await boss_menu(callback.message)


@dp.message_handler(chat_type='private', commands='Curier')
async def curier_panel(message: types.Message):
    cursor.execute(f"SELECT Role FROM login_id WHERE ID={message.chat.id}")
    role = cursor.fetchone()
    if role[0] > 0:
        cursor.execute(f"SELECT menuStatus FROM login_id WHERE ID='{message.chat.id}'")
        status = cursor.fetchone()[0]
        if status == '1' and message.text.lower() == '/curier':
            cursor.execute(f"SELECT menuMessage FROM login_id WHERE ID='{message.chat.id}'")
            user_message = cursor.fetchone()[0].split(',')
            for i in range(len(user_message)):
                try:
                    await bot.delete_message(chat_id=message.chat.id, message_id=int(user_message[i]))
                except:
                    pass
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã.', callback_data='all_orders'))
        keyboard.add(types.InlineKeyboardButton('–ú–æ–∏ –∑–∞–∫–∞–∑—ã.', callback_data='my_orders'))
        sended_message = await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é.', reply_markup=keyboard)
        cursor.execute(
            f"UPDATE login_id SET menuStatus='1', menuMessage='{sended_message.message_id}' WHERE ID='{message.chat.id}'")
        connect.commit()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')


@dp.callback_query_handler(Text(equals='all_orders'))
async def all__orders(callback: types.CallbackQuery):
    cursor.execute("SELECT –ê–¥—Ä–µ—Å, ID, –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏ FROM orders WHERE CurierID is NULL AND Status!='–û—Ç–º–µ–Ω—ë–Ω' AND Status!='–ó–∞–≤–µ—Ä—à—ë–Ω' AND deliveryType=1 AND –¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏!='–°–∞–º–æ–≤—ã–≤–æ–∑'")
    orders = cursor.fetchall()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i in range(len(orders)):
        keyboard.add(types.InlineKeyboardButton(f'ID –∑–∞–∫–∞–∑–∞: {orders[i][1]}, –ê–¥—Ä–µ—Å: {orders[i][0]}\n–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {orders[i][2]}', callback_data=f"check_info_about_active_order {orders[i][1]}"))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©.', callback_data='back_to_curier_panel'))
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º.', reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith='check_info_about_active_order'))
async def check_info_about_active_orders(callback: types.CallbackQuery):
    cursor.execute(f'SELECT User_ID, Status, List, Price, –°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã, –ê–¥—Ä–µ—Å, –¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏, –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏,'
                   f' –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã, Data FROM orders WHERE ID={callback.data.split(" ")[1]}')
    info = cursor.fetchone()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑.', callback_data=f'accept_order {callback.data.split(" ")[1]}'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©.', callback_data='back_to_all_orders'))
    await callback.message.edit_text(f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n<b>ID –∑–∞–∫–∞–∑–∞</b>: {callback.data.split(" ")[1]}\n<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>: {info[0]}\n'
                                     f'<b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞</b>: {info[1]}\n<b>–ö–æ—Ä–∑–∏–Ω–∞</b>: {info[2]}\n<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞</b>: {info[3]}\n<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>: {info[4]}\n'
                                     f'<b>–ê–¥—Ä–µ—Å</b>: {info[5]}\n<b>–¢–∏–ø –î–æ—Å—Ç–∞–≤–∫–∏</b>: {info[6]}\n<b>–í—Ä–µ–º—è –î–æ—Å—Ç–∞–≤–∫–∏</b>: {info[7]}\n'
                                     f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</b>: {info[8]}\n<b>–°—Ç–∞—Ç—É—Å –û–ø–ª–∞—Ç—ã</b>: {info[9]}\n'
                                     f'<b>–î–∞—Ç–∞</b>: {info[10]}', reply_markup=keyboard)


@dp.callback_query_handler(Text(equals='back_to_curier_panel'))
async def back_to_curier_panel(callback: types.CallbackQuery):
    await callback.message.delete()
    await curier_panel(callback.message)


@dp.callback_query_handler(Text(startswith="accept_order"))
async def accept__order(callback: types.CallbackQuery):
    cursor.execute(f"UPDATE orders SET CurierID={callback.message.chat.id} WHERE ID={callback.data.split(' ')[1]}")
    connect.commit()
    await callback.message.edit_text('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑.')
    cursor.execute(f"SELECT User_ID FROM orders WHERE ID={callback.data.split(' ')[1]}")
    userid = cursor.fetchone()
    cursor.execute(f"SELECT –¢–µ–ª–µ—Ñ–æ–Ω FROM login_id WHERE id={userid[0]}")
    await bot.send_message(userid[0], f"–ö—É—Ä—å–µ—Ä –∑–∞–±—Ä–∞–ª –í–∞—à –∑–∞–∫–∞–∑ –∏ —Å–ø–µ—à–∏—Ç –∫ –í–∞–º. –ù–æ–º–µ—Ä –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏ {cursor.fetchone()[0]}")


@dp.callback_query_handler(Text(equals='my_orders'))
async def check_my_orders(callback: types.CallbackQuery):
    cursor.execute(f"SELECT –ê–¥—Ä–µ—Å, ID, –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏ FROM orders WHERE CurierID={callback.message.chat.id} AND Status!='–û—Ç–º–µ–Ω—ë–Ω' AND Status!='–ó–∞–≤–µ—Ä—à—ë–Ω'")
    my_orders = cursor.fetchall()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©.', callback_data='back_to_curier_panel'))
    for i in range (len(my_orders)):
        keyboard.add(types.InlineKeyboardButton(f'ID –∑–∞–∫–∞–∑–∞: {my_orders[i][1]}, –ê–¥—Ä–µ—Å: {my_orders[i][0]}\n–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {my_orders[i][2]}', callback_data=f"check_info_about_my_order {my_orders[i][1]}"))
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º.', reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith='check_info_about_my_order'))
async def check_info_about_my_order(callback: types.CallbackQuery):
    cursor.execute(f'SELECT User_ID, Status, List, Price, –°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã, –ê–¥—Ä–µ—Å, –¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏, –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏,'
                   f' –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã, Data FROM orders WHERE ID={callback.data.split(" ")[1]}')
    info = cursor.fetchone()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton('–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω (–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑)', callback_data=f'complete_order {callback.data.split(" ")[1]}'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©.', callback_data='back_to_my_orders'))
    await callback.message.edit_text(f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n<b>ID –∑–∞–∫–∞–∑–∞</b>: {callback.data.split(" ")[1]}\n<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>: {info[0]}\n'
                                     f'<b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞</b>: {info[1]}\n<b>–ö–æ—Ä–∑–∏–Ω–∞</b>: {info[2]}\n<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞</b>: {info[3]}\n<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>: {info[4]}\n'
                                     f'<b>–ê–¥—Ä–µ—Å</b>: {info[5]}\n<b>–¢–∏–ø –î–æ—Å—Ç–∞–≤–∫–∏</b>: {info[6]}\n<b>–í—Ä–µ–º—è –î–æ—Å—Ç–∞–≤–∫–∏</b>: {info[7]}\n'
                                     f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</b>: {info[8]}\n<b>–°—Ç–∞—Ç—É—Å –û–ø–ª–∞—Ç—ã</b>: {info[9]}\n'
                                     f'<b>–î–∞—Ç–∞</b>: {info[10]}', reply_markup=keyboard)


@dp.callback_query_handler(Text(equals='back_to_all_orders'))
async def back_to_all_panel(callback: types.CallbackQuery):
    await all__orders(callback)


@dp.callback_query_handler(Text(equals='back_to_my_orders'))
async def back_to_my_orders(callback: types.CallbackQuery):
    await check_my_orders(callback)


@dp.callback_query_handler(Text(startswith="complete_order"))
async def complete_order(callback: types.CallbackQuery):
    cursor.execute(f"UPDATE orders SET status='–ó–∞–≤–µ—Ä—à—ë–Ω',–°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã='–û–ø–ª–∞—á–µ–Ω' WHERE ID={callback.data.split(' ')[1]}")
    connect.commit()
    cursor.execute(f"SELECT User_ID FROM orders WHERE ID={callback.data.split(' ')[1]}")
    userid = cursor.fetchone()
    global this_day
    cursor.execute(
        f"SELECT ID, User_ID, Status, List, Price, –°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã, –ê–¥—Ä–µ—Å, –¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏, –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã, Data, CurierID FROM orders")
    info = cursor.fetchall()
    cursor.execute(f'SELECT "–°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã", SUM(price) FROM orders GROUP BY "–°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã"')
    money_buy_type = cursor.fetchall()
    tmp = '"–°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã"'
    cursor.execute(f"SELECT SUM(price) FROM orders WHERE status!='–û—Ç–º–µ–Ω—ë–Ω' AND {tmp}='–û–ø–ª–∞—á–µ–Ω'")
    money = cursor.fetchone()[0]
    cursor.execute(f"SELECT COUNT(*) FROM orders WHERE status!='–û—Ç–º–µ–Ω—ë–Ω'")
    cancels_amount = cursor.fetchone()[0]
    array = [["" for j in range(1)] for i in range(len(info))]
    for i in range(len(info)):
        if info[i][2] == '–ó–∞–≤–µ—Ä—à—ë–Ω':
            array[i][0] = str(info[i][4])
    results = service.spreadsheets().values().batchUpdate(spreadsheetId=spreadsheetId, body={
        "valueInputOption": "RAW",
        "data": [
            {"range": f"{this_day}!A1", 'values': [
                ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', '–í—ã—Ä—É—á–∫–∞ –∑–∞ –¥–µ–Ω—å'],
                [len(info), cancels_amount, money]
            ]},
            {"range": f"{this_day}!A3", 'values': money_buy_type},
            {"range": f"{this_day}!A5",
             "values": [
                 ['ID –∑–∞–∫–∞–∑–∞', 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', '–ü–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑–µ', '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞', '–°–ø–æ—Å–æ–± –û–ø–ª–∞—Ç—ã',
                  '–ê–¥—Ä–µ—Å', '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', '–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã', '–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞',
                  'ID –∫—É—Ä—å–µ—Ä–∞, –¥–æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –∑–∞–∫–∞–∑', '–ò–¢–û–ì–û'],
             ]},
            {"range": f"{this_day}!A6", 'values': info
             },
            {"range": f"{this_day}!N6", 'values': array}
        ]
    }).execute()
    await callback.message.edit_text('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–∫–∞–∑.')
    cursor.execute(f"SELECT –°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã FROM orders WHERE ID={callback.data.split(' ')[1]}")
    temp = cursor.fetchone()
    if temp != '–ö–∞—Ä—Ç–æ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ' and temp != '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É':
        cursor.execute(f"SELECT User_ID, Price FROM orders WHERE ID={callback.data.split(' ')[1]}")
        userid = cursor.fetchone()
        cursor.execute(f"UPDATE login_id SET OrdersSum=OrdersSum+{userid[1]} WHERE ID={userid[0]}")
        connect.commit()
    await bot.send_message(userid[0], "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –ñ–¥—ë–º –í–∞—Å —Å–Ω–æ–≤–∞ üôÇ")
    await asyncio.sleep(600)
    await hello_menu(callback.message)


@dp.callback_query_handler(Text(equals='cancel_order'))
async def cancel__order(callback: types.CallbackQuery):
    cursor.execute("SELECT User_ID, Price, ID FROM orders WHERE status!='–û—Ç–º–µ–Ω—ë–Ω' AND status!='–ó–∞–≤–µ—Ä—à—ë–Ω'")
    short_info = cursor.fetchall()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i in range(len(short_info)):
        keyboard.add(types.InlineKeyboardButton(f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {short_info[i][0]}\n–¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: {short_info[i][1]}', callback_data=f'checkinfo {short_info[i][2]}'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data="back_to_boss"))
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–º–µ–Ω—ã)', reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith='checkinfo'))
async def check_info_about_cancel_order(callback: types.CallbackQuery):
    cursor.execute(f'SELECT ID, User_ID, status, List, Price, –°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã, –ê–¥—Ä–µ—Å, –¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏, –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏,'
                   f' –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã, Data FROM orders WHERE ID={callback.data.split(" ")[1]}')
    info = cursor.fetchone()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'cancel_this_order {callback.data.split(" ")[1]} {info[1]}'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data=f'cancel_order'))
    await callback.message.edit_text(f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n<b>ID –∑–∞–∫–∞–∑–∞</b>: {info[0]}\n<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>: {info[1]}\n'
                                     f'<b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞</b>: {info[2]}\n<b>–ö–æ—Ä–∑–∏–Ω–∞</b>: {info[3]}\n<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞</b>: {info[4]}\n<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>: {info[5]}\n'
                                     f'<b>–ê–¥—Ä–µ—Å</b>: {info[6]}\n<b>–¢–∏–ø –î–æ—Å—Ç–∞–≤–∫–∏</b>: {info[7]}\n<b>–í—Ä–µ–º—è –î–æ—Å—Ç–∞–≤–∫–∏</b>: {info[8]}\n'
                                     f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</b>: {info[9]}\n<b>–°—Ç–∞—Ç—É—Å –û–ø–ª–∞—Ç—ã</b>: {info[10]}\n'
                                     f'<b>–î–∞—Ç–∞</b>: {info[11]}',
                                     reply_markup=keyboard, parse_mode=ParseMode.HTML)


@dp.callback_query_handler(Text(startswith='cancel_this_order'))
async def cancel__this_order(callback: types.CallbackQuery):
    cursor.execute(f"UPDATE orders SET status='–û—Ç–º–µ–Ω—ë–Ω',–°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã='–û—Ç–º–µ–Ω—ë–Ω' WHERE ID={callback.data.split(' ')[1]}")
    connect.commit()
    cursor.execute(f"UPDATE login_id SET CancelOrders=CancelOrders+1 WHERE ID={callback.data.split(' ')[2]}")
    connect.commit()
    cursor.execute(f'SELECT User_ID, List FROM orders WHERE ID={callback.data.split(" ")[1]}')
    temp = cursor.fetchone()
    await callback.message.edit_text('–í—ã–±—Ä–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –º–µ–Ω—é.')
    await boss_menu(callback.message)
    global this_day
    cursor.execute(
        f"SELECT ID, User_ID, Status, List, Price, –°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã, –ê–¥—Ä–µ—Å, –¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏, –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã, Data, CurierID FROM orders")
    info = cursor.fetchall()
    cursor.execute(f'SELECT "–°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã", SUM(price) FROM orders GROUP BY "–°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã"')
    money_buy_type = cursor.fetchall()
    tmp = '"–°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã"'
    cursor.execute(f"SELECT SUM(price) FROM orders WHERE status!='–û—Ç–º–µ–Ω—ë–Ω' AND {tmp}='–û–ø–ª–∞—á–µ–Ω'")
    money = cursor.fetchone()[0]
    cursor.execute(f"SELECT COUNT(*) FROM orders WHERE status!='–û—Ç–º–µ–Ω—ë–Ω'")
    cancels_amount = cursor.fetchone()[0]
    array = [["" for j in range(1)] for i in range(len(info))]
    for i in range(len(info)):
        if info[i][2] == '–ó–∞–≤–µ—Ä—à—ë–Ω':
            array[i][0] = str(info[i][4])
    results = service.spreadsheets().values().batchUpdate(spreadsheetId=spreadsheetId, body={
        "valueInputOption": "RAW",
        "data": [
            {"range": f"{this_day}!A1", 'values': [
                ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', '–í—ã—Ä—É—á–∫–∞ –∑–∞ –¥–µ–Ω—å'],
                [len(info), cancels_amount, money]
            ]},
            {"range": f"{this_day}!A3", 'values': money_buy_type},
            {"range": f"{this_day}!A5",
             "values": [
                 ['ID –∑–∞–∫–∞–∑–∞', 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', '–ü–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑–µ', '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞', '–°–ø–æ—Å–æ–± –û–ø–ª–∞—Ç—ã',
                  '–ê–¥—Ä–µ—Å', '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', '–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã', '–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞',
                  'ID –∫—É—Ä—å–µ—Ä–∞, –¥–æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –∑–∞–∫–∞–∑', '–ò–¢–û–ì–û'],
             ]},
            {"range": f"{this_day}!A6", 'values': info
             },
            {"range": f"{this_day}!N6", 'values': array}
        ]
    }).execute()
    await callback.message.edit_text('–ó–∞–∫–∞–∑ –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–π.')
    await bot.send_message(temp[0], f'–í–∞—à –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä {callback.data.split(" ")[1]} —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ {temp[1]} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω')


@dp.callback_query_handler(Text(startswith='delete_item'))
async def delete_from_menu(callback: types.CallbackQuery, state: FSMContext):
    temp = callback.data.split(' ')
    item_to_del = ''
    for i in range(1, len(temp)):
        item_to_del += str(temp[i])
    async with state.proxy() as data:
        cursor.execute(f"DELETE FROM cart WHERE name='{data['type']}'")
    await state.finish()
    cursor.execute(f"DELETE FROM menu WHERE ID={int(item_to_del)}")
    connect.commit()
    await callback.message.edit_text('–í—ã–±—Ä–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –º–µ–Ω—é.')
    await boss_menu(callback.message)



@dp.callback_query_handler(Text(equals='OpenShift'))
async def open_work_shift(callback: types.CallbackQuery):
    global stop
    global list_name
    global months
    stop = printer()
    global this_month
    global this_year
    global spreadsheetId
    global this_day
    global work_shift
    if datetime.today().date().month != this_month:
        this_month = datetime.today().date().month
        this_day = datetime.today().date().day
        list_name = f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ BurgerTek –ü–æ–ª—è—Ä–Ω—ã–π {months[f"{this_month}"]}'
        spreadsheet = service.spreadsheets().create(body={
            'properties': {'title': f'{list_name}', 'locale': 'ru_RU'},
            'sheets': [{'properties': {'sheetType': 'GRID',
                                        'sheetId': 0,
                                        'title': f'{this_day}',
                                        'gridProperties': {'rowCount': 5000, 'columnCount': 30}}}]
        }).execute()
        driveService = build('drive', 'v3', credentials=credentials)
        driveService.permissions().create(
            fileId=spreadsheet['spreadsheetId'],
            body={'type': 'user', 'role': 'writer', 'emailAddress': 'borisovzd@gmail.com'},  # –¥–æ—Å—Ç—É–ø
            fields='id',
        ).execute()
        driveService.permissions().create(
            fileId=spreadsheet['spreadsheetId'],
            body={'type': 'user', 'role': 'writer', 'emailAddress': 'ghostshadow4527@gmail.com'},  # –¥–æ—Å—Ç—É–ø
            fields='id',
        ).execute()
        spreadsheetId = spreadsheet['spreadsheetId']
        await bot.send_message( 546186690, f'https://docs.google.com/spreadsheets/d/{spreadsheetId}')
    elif datetime.today().date().day != this_day:
        this_day = datetime.today().date().day
        service.spreadsheets().batchUpdate(
            spreadsheetId=spreadsheetId,
            body=
            {
                "requests": [
                    {
                        "addSheet": {
                            "properties": {
                                "title": f"{this_day}",
                                "gridProperties": {
                                    "rowCount": 5000,
                                    "columnCount": 30
                                }
                            }
                        }
                    }
                ]
            }).execute()
    work_shift = True
    await callback.answer('–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞')


@dp.callback_query_handler(Text(equals='CloseShift'))
async def close_work_shift(callback: types.CallbackQuery):
    global work_shift
    work_shift = False
    global stop
    stop.set()
    await callback.answer('–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞')
    global this_day
    cursor.execute(
        f"SELECT ID, User_ID, Status, List, Price, –°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã, –ê–¥—Ä–µ—Å, –¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏, –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã, Data, CurierID FROM orders")
    info = cursor.fetchall()
    cursor.execute(f'SELECT "–°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã", SUM(price) FROM orders GROUP BY "–°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã"')
    money_buy_type = cursor.fetchall()
    tmp = '"–°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã"'
    cursor.execute(f"SELECT SUM(price) FROM orders WHERE status!='–û—Ç–º–µ–Ω—ë–Ω' AND {tmp}='–û–ø–ª–∞—á–µ–Ω'")
    money = cursor.fetchone()[0]
    cursor.execute(f"SELECT COUNT(*) FROM orders WHERE status!='–û—Ç–º–µ–Ω—ë–Ω'")
    cancels_amount = cursor.fetchone()[0]
    array = [["" for j in range(1)] for i in range(len(info))]
    for i in range(len(info)):
        if info[i][2] == '–ó–∞–≤–µ—Ä—à—ë–Ω':
            array[i][0] = str(info[i][4])
    results = service.spreadsheets().values().batchUpdate(spreadsheetId=spreadsheetId, body={
        "valueInputOption": "RAW",
        "data": [
            {"range": f"{this_day}!A1", 'values': [
                ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', '–í—ã—Ä—É—á–∫–∞ –∑–∞ –¥–µ–Ω—å'],
                [len(info), cancels_amount, money]
            ]},
            {"range": f"{this_day}!A3", 'values': money_buy_type},
            {"range": f"{this_day}!A5",
             "values": [
                 ['ID –∑–∞–∫–∞–∑–∞', 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', '–ü–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑–µ', '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞', '–°–ø–æ—Å–æ–± –û–ø–ª–∞—Ç—ã',
                  '–ê–¥—Ä–µ—Å', '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', '–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã', '–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞',
                  'ID –∫—É—Ä—å–µ—Ä–∞, –¥–æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –∑–∞–∫–∞–∑', '–ò–¢–û–ì–û'],
             ]},
            {"range": f"{this_day}!A6", 'values': info
             },
            {"range": f"{this_day}!N6", 'values': array}
        ]
    }).execute()


async def main_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤üñå', '–ú–µ–Ω—éüçΩ', '–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞üÜò', '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞üîç', '–ö–æ—Ä–∑–∏–Ω–∞üõí',
               '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å‚úè', '–í –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é‚Ü©']
    keyboard.add(*buttons)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> Burgertek!'
                         ' –ü–æ–∫–∞–∑–∞—Ç—å –í–∞–º –º–µ–Ω—é? –ò–ª–∏ –∂–µ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤? –ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É?'
                         ' –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —è –ø–æ–º–æ–≥—É –í–∞–º!‚ô•Ô∏è', reply_markup=keyboard, parse_mode=ParseMode.HTML)
    if fifteenPercent == 1:
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –∞–∫—Ü–∏—è –Ω–∞ 15% –æ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞!")


@dp.message_handler(chat_type='private', commands='povar')
async def povar(message: types.Message):
    cursor.execute(f"SELECT Role FROM login_id WHERE ID={message.chat.id}")
    if cursor.fetchone()[0] < 2:
        await message.answer('—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
        return
    cursor.execute(f"SELECT menuStatus FROM login_id WHERE ID='{message.chat.id}'")
    status = cursor.fetchone()[0]
    if message.text is None:
        message.text = 'text'
    if status == '1' and message.text.lower() == '/povar':
        cursor.execute(f"SELECT menuMessage FROM login_id WHERE ID={message.chat.id}")
        user_message = cursor.fetchone()[0].split(',')
        for i in range(len(user_message)):
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=int(user_message[i]))
            except:
                pass
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton('–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data='active_orders'))
    keyboard.add(types.InlineKeyboardButton('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–æ', callback_data='block_position'))
    keyboard.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É', callback_data='OpenShift'))
    keyboard.add(types.InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É', callback_data='CloseShift'))
    sended_message = await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é.', reply_markup=keyboard)
    cursor.execute(
        f"UPDATE login_id SET menuStatus='1', menuMessage='{sended_message.message_id}' WHERE ID='{message.chat.id}'")
    connect.commit()


@dp.callback_query_handler(Text(startswith='block_position'))
async def block_position(callback: types.CallbackQuery):
        cursor.execute("SELECT DISTINCT Type FROM menu")
        tmp = cursor.fetchall()
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for i in range(len(tmp)):
            keyboard.add(types.InlineKeyboardButton(tmp[i][0], callback_data=f"povar_menu_type {tmp[i][0]}"))
        keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©", callback_data="povar_menu_back"))
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith='povar_menu_type'))
async def povar_menu_type(callback: types.CallbackQuery, state: FSMContext):
    name = callback.data.split(' ')[1]
    cursor.execute(f"SELECT Name,ID FROM menu WHERE Type='{name}'")
    tmp = cursor.fetchall()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i in range(len(tmp)):
        keyboard.add(types.InlineKeyboardButton(tmp[i][0], callback_data=f"povar_menu_item {tmp[i][1]}"))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data="povar_menu_return"))
    async with state.proxy() as data:
        data['type'] = name
    await callback.message.delete()
    sended_message = await bot.send_message(callback.message.chat.id, text='–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä', reply_markup=keyboard)
    cursor.execute(f"UPDATE login_id SET menuMessage='{sended_message.message_id}' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    await callback.answer()


@dp.callback_query_handler(Text(startswith='povar_menu_item'))
async def povar_menu_item(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    item_id = callback.data.split('povar_menu_item ')[1]
    async with state.proxy() as data:
        data['id'] = item_id
        data['amount'] = 1
        data['item_id'] = item_id
    cursor.execute(f"SELECT Available FROM menu WHERE ID='{item_id}'")
    available = cursor.fetchone()[0]
    if available == 0:
        keyboard.add(types.InlineKeyboardButton('–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é', callback_data=f"povar_item_block;{available};{item_id}"))
    else:
        keyboard.add(types.InlineKeyboardButton('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é', callback_data=f"povar_item_block;{available};{item_id}"))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data="povar_menu__item_back"))
    cursor.execute(f"SELECT Photo,Description,Price FROM menu WHERE ID='{item_id}'")
    tmp = cursor.fetchone()
    message_text = await callback.message.answer_photo(photo=str(tmp[0]), reply_markup=keyboard,
                                                       caption=f"–û–ø–∏—Å–∞–Ω–∏–µ: {tmp[1]}"
                                                               f"\n–¶–µ–Ω–∞: {tmp[2]} ‚ÇΩ")
    cursor.execute(
        f"UPDATE login_id SET menuMessage='{message_text.message_id}' WHERE ID='{callback.message.chat.id}'")
    connect.commit()


@dp.callback_query_handler(Text(startswith='povar_item_block'))
async def povar_item_block(callback: types.CallbackQuery, state: FSMContext):
    item_id = callback.data.split(';')[2]
    item_available = callback.data.split(';')[1]
    if item_available == '1':
        cursor.execute(f"SELECT name FROM menu WHERE ID='{item_id}'")
        item_name = cursor.fetchone()[0]
        cursor.execute(f"UPDATE menu SET Available=0 WHERE ID='{item_id}'")
        cursor.execute(f"DELETE FROM cart WHERE name='{item_name}'")
    else:
        cursor.execute(f"UPDATE menu SET Available=1 WHERE ID='{item_id}'")
    connect.commit()
    await callback.message.delete()
    cursor.execute(
        f"UPDATE login_id SET menuMessage='' WHERE ID='{callback.message.chat.id}'")
    await state.finish()
    await povar(callback.message)


@dp.callback_query_handler(Text(equals='povar_menu__item_back'))
async def menu_item_back(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        name = data['type']
    cursor.execute(f"SELECT Name,ID FROM menu WHERE Type='{name}'")
    tmp = cursor.fetchall()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i in range(len(tmp)):
        keyboard.add(types.InlineKeyboardButton(tmp[i][0], callback_data=f"povar_menu_item {tmp[i][1]}"))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data="povar_menu_return"))
    async with state.proxy() as data:
        data['type'] = name
    await callback.message.delete()
    sended_message = await bot.send_message(callback.message.chat.id, text='–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä', reply_markup=keyboard)
    cursor.execute(f"UPDATE login_id SET menuMessage='{sended_message.message_id}' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    await callback.answer()


@dp.callback_query_handler(Text(startswith='povar_menu_return'))
async def povar_menu_return(callback: types.CallbackQuery):
    await callback.answer()
    await block_position(callback)


@dp.callback_query_handler(Text(equals='povar_menu_back'))
async def menu_type_back(callback: types.CallbackQuery):
    await callback.answer('–í—ã –±—ã–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –º–µ–Ω—é –ø–æ–≤–∞—Ä–∞')
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    await callback.message.delete()
    await povar(callback.message)


@dp.callback_query_handler(Text(equals='active_orders'))
async def active_orders(callback: types.CallbackQuery):
    cursor.execute(
        "SELECT –ê–¥—Ä–µ—Å, ID, –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏ FROM orders WHERE (Status='–ì–æ—Ç–æ–≤–∏—Ç—Å—è' OR Status='–ì–æ—Ç–æ–≤') AND deliveryType=1")
    orders = cursor.fetchall()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i in range(len(orders)):
        keyboard.add(types.InlineKeyboardButton(
            f'ID –∑–∞–∫–∞–∑–∞: {orders[i][1]}, –ê–¥—Ä–µ—Å: {orders[i][0]}\n–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {orders[i][2]}',
            callback_data=f"check_active_order {orders[i][1]}"))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data='back_to_povar_menu'))
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(Text(startswith='check_active_order'))
async def check_active_order(callback: types.CallbackQuery):
    cursor.execute(f'SELECT User_ID, Status, List, Price, –°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã, –ê–¥—Ä–µ—Å, –¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏, –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏,'
                   f' –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã, Data FROM orders WHERE ID={callback.data.split(" ")[1]}')
    info = cursor.fetchone()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    if info[6] == '–°–∞–º–æ–≤—ã–≤–æ–∑':
        if info[1] != '–ì–æ—Ç–æ–≤':
            keyboard.add(types.InlineKeyboardButton('–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π',
                                                    callback_data=f'povar_order_accept {callback.data.split(" ")[1]}'))
        keyboard.add(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'povar_finish_order {callback.data.split(" ")[1]}'))
    else:
        keyboard.add(
            types.InlineKeyboardButton('–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π',
                                       callback_data=f'povar_accept_order {callback.data.split(" ")[1]}'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data='back_to_povar_orders'))
    await callback.message.edit_text(
        f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n<b>ID –∑–∞–∫–∞–∑–∞</b>: {callback.data.split(" ")[1]}\n<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>: {info[0]}\n'
        f'<b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞</b>: {info[1]}\n<b>–ö–æ—Ä–∑–∏–Ω–∞</b>: {info[2]}\n<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞</b>: {info[3]}\n<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>: {info[4]}\n'
        f'<b>–ê–¥—Ä–µ—Å</b>: {info[5]}\n<b>–¢–∏–ø –î–æ—Å—Ç–∞–≤–∫–∏</b>: {info[6]}\n<b>–í—Ä–µ–º—è –î–æ—Å—Ç–∞–≤–∫–∏</b>: {info[7]}\n'
        f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</b>: {info[8]}\n<b>–°—Ç–∞—Ç—É—Å –û–ø–ª–∞—Ç—ã</b>: {info[9]}\n'
        f'<b>–î–∞—Ç–∞</b>: {info[10]}', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(Text(startswith="povar_finish_order"))
async def povar_finish_order(callback: types.CallbackQuery):
    cursor.execute(f"UPDATE orders SET –°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã ='–û–ø–ª–∞—á–µ–Ω', Status='–ó–∞–≤–µ—Ä—à—ë–Ω' WHERE ID={callback.data.split(' ')[1]}")
    connect.commit()
    cursor.execute(f"SELECT –°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã FROM orders WHERE ID={callback.data.split(' ')[1]}")
    temp = cursor.fetchone()
    if temp != '–ö–∞—Ä—Ç–æ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ' and temp != '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É':
        cursor.execute(f"SELECT User_ID, Price FROM orders WHERE ID={callback.data.split(' ')[1]}")
        userid = cursor.fetchone()
        cursor.execute(f"UPDATE login_id SET OrdersSum=OrdersSum+{userid[1]} WHERE ID={userid[0]}")
        connect.commit()
    await callback.answer('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω')
    global this_day
    cursor.execute(
        f"SELECT ID, User_ID, Status, List, Price, –°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã, –ê–¥—Ä–µ—Å, –¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏, –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã, Data, CurierID FROM orders")
    info = cursor.fetchall()
    cursor.execute(f'SELECT "–°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã", SUM(price) FROM orders GROUP BY "–°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã"')
    money_buy_type = cursor.fetchall()
    tmp = '"–°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã"'
    cursor.execute(f"SELECT SUM(price) FROM orders WHERE status!='–û—Ç–º–µ–Ω—ë–Ω' AND {tmp}='–û–ø–ª–∞—á–µ–Ω'")
    money = cursor.fetchone()[0]
    cursor.execute(f"SELECT COUNT(*) FROM orders WHERE status!='–û—Ç–º–µ–Ω—ë–Ω'")
    cancels_amount = cursor.fetchone()[0]
    array = [["" for j in range(1)] for i in range(len(info))]
    for i in range(len(info)):
        if info[i][2] == '–ó–∞–≤–µ—Ä—à—ë–Ω':
            array[i][0] = str(info[i][4])
    results = service.spreadsheets().values().batchUpdate(spreadsheetId=spreadsheetId, body={
        "valueInputOption": "RAW",
        "data": [
            {"range": f"{this_day}!A1", 'values': [
                ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', '–í—ã—Ä—É—á–∫–∞ –∑–∞ –¥–µ–Ω—å'],
                [len(info), cancels_amount, money]
            ]},
            {"range": f"{this_day}!A3", 'values': money_buy_type},
            {"range": f"{this_day}!A5",
             "values": [
                 ['ID –∑–∞–∫–∞–∑–∞', 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', '–ü–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑–µ', '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞', '–°–ø–æ—Å–æ–± –û–ø–ª–∞—Ç—ã',
                  '–ê–¥—Ä–µ—Å', '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', '–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã', '–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞',
                  'ID –∫—É—Ä—å–µ—Ä–∞, –¥–æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –∑–∞–∫–∞–∑', '–ò–¢–û–ì–û'],
             ]},
            {"range": f"{this_day}!A6", 'values': info
             },
            {"range": f"{this_day}!N6", 'values': array}
        ]
    }).execute()
    cursor.execute(f"SELECT User_ID, Price FROM orders WHERE ID={callback.data.split(' ')[1]}")
    userid = cursor.fetchone()
    cursor.execute(f"UPDATE login_id SET OrdersSum=OrdersSum+{userid[1]} WHERE ID={userid[0]}")
    connect.commit()
    await callback.message.delete()
    await povar(callback.message)
    await callback.answer()


@dp.callback_query_handler(Text(startswith='povar_order_accept'))
async def povar_order_accept(callback: types.CallbackQuery):
    cursor.execute(f"UPDATE orders SET Status='–ì–æ—Ç–æ–≤' WHERE ID={callback.data.split(' ')[1]}")
    connect.commit()
    await callback.answer('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω')
    await callback.message.delete()
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    await povar(callback.message)


@dp.callback_query_handler(Text(startswith="povar_accept_order"))
async def povar_accept_order(callback: types.CallbackQuery):
    cursor.execute(f"SELECT CurierID,List FROM orders WHERE ID={callback.data.split(' ')[1]}")
    courierStatus = cursor.fetchone()
    if courierStatus[0] is not None:
        cursor.execute(f"UPDATE orders SET Status='–í –ø—É—Ç–∏' WHERE ID={callback.data.split(' ')[1]}")
    else:
        cursor.execute(f"UPDATE orders SET Status='–û–∂–∏–¥–∞–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞' WHERE ID={callback.data.split(' ')[1]}")
    connect.commit()
    await callback.answer('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω')
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    await callback.message.delete()
    await povar(callback.message)


@dp.callback_query_handler(Text(equals='back_to_povar_orders'))
async def back_to_povar_orders(callback: types.CallbackQuery):
    await active_orders(callback)
    await callback.answer()


@dp.callback_query_handler(Text(equals='back_to_povar_menu'))
async def back_to_povar_menu(callback: types.CallbackQuery):
    await callback.answer()
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    await callback.message.delete()
    await povar(callback.message)


@dp.callback_query_handler(Text(equals='our_reviews'))
async def our_reviews(callback: types.CallbackQuery):
    await callback.message.delete()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤ üéâ', callback_data='order_ivent'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã üìù', callback_data=f'our_reviews'))
    keyboard.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìç', callback_data='main__menu'))
    keyboard.add(types.InlineKeyboardButton('–°–∫–∞—á–∞—Ç—å –º–µ–Ω—é –≤ pdf üì•', callback_data='download_pdf'))
    await asyncio.sleep(0.5)
    await callback.message.answer(
        "–ò–º—è: –û–ª–µ–≥\n –û—Ü–µ–Ω–∫–∞:  üåüüåüüåüüåüüåü \n –û—Ç–∑—ã–≤: –°–∞–º–∞—è –ª—É—á—à–∞—è —à–∞–≤–∞, –∫–æ—Ç–æ—Ä—É—é —è –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø—Ä–æ–±–æ–≤–∞–ª."
        "–û—Å–æ–±–µ–Ω–Ω–æ —Å–æ–≤–µ—Ç—É—é BBQ —Å –¥–≤–æ–π–Ω—ã–º –º—è—Å–æ–º. –û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ 5/5")
    await asyncio.sleep(0.5)
    await callback.message.answer(
        "–ò–º—è: –ï–≥–æ—Ä\n –û—Ü–µ–Ω–∫–∞:  üåüüåüüåüüåüüåü \n –û—Ç–∑—ã–≤: –ó–∞–∫–∞–∑—ã–≤–∞–ª —à–∞–≤–µ—Ä–º—É —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º, –æ—Å—Ç–∞–ª—Å—è –¥–æ–≤–æ–ª–µ–Ω."
        " –û—á–µ–Ω—å –º–Ω–æ–≥–æ –º—è—Å–∞,"
        "—Å–æ—É—Å–∞. –ü–æ–ª—É—á–∏–ª–æ—Å—å –æ—á–µ–Ω—å –≤–∫—É—Å–Ω–æ.")
    await asyncio.sleep(0.5)
    await callback.message.answer("–ò–º—è: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞\n –û—Ü–µ–Ω–∫–∞:  üåüüåüüåüüåüüåü \n –û—Ç–∑—ã–≤: –±—É—Ä–≥–µ—Ä—ã –∏ —Ö–æ—Ç –¥–æ–≥–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–∏."
                                  " –ï–¥–∞ —Å—ã—Ç–Ω–∞—è –∏ –≤–∫—É—Å–Ω–∞—è, –±—Ä–∞–ª–∏ –Ω–∞ 6 —á–µ–ª–æ–≤–µ–∫, –≤—Å–µ–º —Ö–≤–∞—Ç–∏–ª–æ, –≤—Å–µ –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã")
    await asyncio.sleep(0.5)
    await callback.message.answer(
        "–ò–º—è: –ú—É—Ä–∞–¥\n –û—Ü–µ–Ω–∫–∞:  üåüüåüüåüüåüüåü \n –û—Ç–∑—ã–≤: –ü–æ–≤–∞—Ä—É –æ—Ç –¥—É—à–∏ –∑–∞ —à–∞–≤–µ—Ä–º—É, –ø—Ä–æ—Å—Ç–æ —Ü–∞—Ä—Å–∫–∞—è!", reply_markup=keyboard)


@dp.message_handler(Text(equals='–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤üñå'), chat_type='private')
async def review(message: types.Message):
    cursor.execute(f"SELECT menuStatus FROM login_id WHERE ID='{message.chat.id}'")
    if cursor.fetchone()[0] == '1':
        cursor.execute(f"SELECT menuMessage FROM login_id WHERE ID='{message.chat.id}'")
        user_message = cursor.fetchone()[0].split(',')
        for i in range(len(user_message)):
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=int(user_message[i]))
            except:
                pass
    cursor.execute(
        f"UPDATE login_id SET menuStatus='1', menuMessage='{message.message_id + 1}' WHERE ID='{message.chat.id}'")
    connect.commit()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    stars = ""
    for i in range(5):
        stars += 'üåü'
        keyboard.add(types.InlineKeyboardButton(stars, callback_data=f'review_stars {i + 1}'))
    keyboard.add(types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='review_return'))
    sended_message = await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É', reply_markup=keyboard)
    cursor.execute(
        f"UPDATE login_id SET menuStatus='1', menuMessage='{sended_message.message_id}' WHERE ID='{message.chat.id}'")
    connect.commit()


@dp.callback_query_handler(Text(equals='review_return'))
async def review_return(callback: types.CallbackQuery):
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    await callback.answer('–í—ã –±—ã–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    await callback.message.delete()
    await main_menu(callback.message)


@dp.callback_query_handler(Text(startswith='review_stars'))
async def review_stars(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['stars'] = callback.data.split(' ')[1]
    await callback.message.edit_text(text='–û–ø–∏—à–∏—Ç–µ –ø–æ—á–µ–º—É –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∏–º–µ–Ω–Ω–æ —ç—Ç—É –æ—Ü–µ–Ω–∫—É:')
    await Review.text.set()


@dp.message_handler(state=Review.text)
async def review_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
    await state.finish()
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{message.chat.id}'")
    connect.commit()
    cursor.execute(f"SELECT –ò–º—è, –¢–µ–ª–µ—Ñ–æ–Ω FROM login_id WHERE ID={message.chat.id}")
    info = cursor.fetchone()
    await bot.send_message(-1001547432335,
                           "–ò–º—è: " + info[0] + "\n–¢–µ–ª–µ—Ñ–æ–Ω: " + info[1] + "\n–û—Ü–µ–Ω–∫–∞: " + data['stars'] + "\n–û—Ç–∑—ã–≤: " +
                           data['text'])
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤‚ô•')
    await main_menu(message)


@dp.message_handler(Text(equals='–ú–µ–Ω—éüçΩ'), chat_type='private')
async def menu(message: types.Message):
    cursor.execute(f"SELECT menuStatus FROM login_id WHERE ID={message.chat.id}")
    status = cursor.fetchone()[0]
    cursor.execute("SELECT DISTINCT Type FROM menu")
    tmp = cursor.fetchall()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i in range(len(tmp)):
        withsmile = tmp[i][0]
        if withsmile == '–ë—É—Ä–≥–µ—Ä':
            withsmile += 'üçî'
        elif withsmile == '–ö–∞—Ä—Ç–æ—à–∫–∞-—Ñ—Ä–∏':
            withsmile += 'üçü'
        elif withsmile == '–•–æ—Ç-–¥–æ–≥':
            withsmile += 'üå≠'
        elif withsmile == '–®–∞–≤–µ—Ä–º–∞':
            withsmile += 'üåØ'
        elif withsmile == '–ë–ª–∏–Ω—ã':
            withsmile += 'ü•û'
        elif withsmile == '–ù–∞–ø–∏—Ç–∫–∏':
            withsmile += '‚òï'
        keyboard.add(types.InlineKeyboardButton(withsmile, callback_data=f"menu_type {tmp[i][0]}"))
    keyboard.add(types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©", callback_data="menu_back"))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)
    if status == '1' and message.text == '–ú–µ–Ω—éüçΩ':
        cursor.execute(f"SELECT menuMessage FROM login_id WHERE ID='{message.chat.id}'")
        user_message = cursor.fetchone()[0].split(',')
        for i in range(len(user_message)):
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=int(user_message[i]))
            except:
                pass
    cursor.execute(
        f"UPDATE login_id SET menuStatus='1', menuMessage='{message.message_id + 1}' WHERE ID='{message.chat.id}'")
    connect.commit()


@dp.callback_query_handler(Text(startswith='menu_type'))
async def menu_type(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass
    name = callback.data.split(' ')[1]
    cursor.execute(f"SELECT Name,ID FROM menu WHERE Type='{name}'")
    tmp = cursor.fetchall()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    item_id = []
    for i in range(len(tmp)):
        cursor.execute(f"SELECT Photo,Description,Price,Name FROM menu WHERE ID='{tmp[i][1]}'")
        position = cursor.fetchone()
        await asyncio.sleep(0.55)
        if position[1] != "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
            message = await callback.message.answer_photo(photo=str(position[0]), caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {position[3]}"
                                                                                          f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {position[1]}"
                                                                                          f"\n–¶–µ–Ω–∞: {position[2]} ‚ÇΩ")
        else:
            message = await callback.message.answer_photo(photo=str(position[0]), caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {position[3]}"
                                                                                          f"\n–¶–µ–Ω–∞: {position[2]} ‚ÇΩ")
        message_id = message.message_id
        item_id.append(message_id)
        keyboard.add(types.InlineKeyboardButton(tmp[i][0], callback_data=f"menu_item {tmp[i][1]}"))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data="menu_return"))
    async with state.proxy() as data:
        data['type'] = name
    sended_message = await bot.send_message(callback.message.chat.id, text='–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä', reply_markup=keyboard)
    text = f"{sended_message.message_id},{','.join(map(str, item_id))}"
    cursor.execute(f"UPDATE login_id SET menuMessage='{text}' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    await callback.answer()


@dp.callback_query_handler(Text(equals='menu_back'))
async def menu_type_back(callback: types.CallbackQuery):
    await callback.answer('–í—ã –±—ã–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    await main_menu(callback.message)
    await callback.message.delete()
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{callback.message.chat.id}'")
    connect.commit()


@dp.callback_query_handler(Text(startswith='menu_item'))
async def menu_item(callback: types.CallbackQuery, state: FSMContext):
    item_id = callback.data.split('menu_item ')[1]
    cursor.execute(f"SELECT Available FROM menu WHERE ID='{item_id}'")
    if cursor.fetchone()[0] == 0:
        await callback.answer('–î–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    async with state.proxy() as data:
        cursor.execute(f"SELECT menuMessage FROM login_id WHERE ID='{callback.message.chat.id}'")
        message = cursor.fetchone()[0].split(',')
        for i in range(len(message)):
            try:
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=int(message[i]))
            except:
                pass
        data['id'] = item_id
        data['amount'] = 1
        data['size'] = 'Empty'
        data['item_id'] = item_id
    cursor.execute(f"SELECT Name FROM menu WHERE ID='{item_id}'")
    size = cursor.fetchone()[0]
    cursor.execute(f"SELECT size,price FROM item_size WHERE Type='{data['type']}' AND Pos_Name='{size}'")
    positions = cursor.fetchall()
    if len(positions) > 0:
        async with state.proxy() as data:
            data['size'] = None
        keyboard.add(types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä', callback_data=f"menu_adds_size"))
    cursor.execute(f"SELECT * FROM adds WHERE Permission like '%{data['type']}%'")
    if len(cursor.fetchall()) > 0:
        keyboard.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', callback_data=f"menu_adds_item {item_id}"))
    keyboard.row(types.InlineKeyboardButton('‚ûñ', callback_data='data_downgrade'),
                 types.InlineKeyboardButton(f"{data['amount']} —à—Ç.", callback_data=f"nothing"),
                 types.InlineKeyboardButton('‚ûï', callback_data='data_increase'))
    keyboard.add(types.InlineKeyboardButton('–í –∫–æ—Ä–∑–∏–Ω—É', callback_data=f"menu_send_cart"))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data="menu__item_back"))
    cursor.execute(f"SELECT Photo,Description,Price FROM menu WHERE ID='{item_id}'")
    tmp = cursor.fetchone()
    text = ''
    if tmp[1] != "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {tmp[1]}"
    if data['size'] is None:
        for i in range(len(positions)):
            text += f"\n{positions[i][0]} - {positions[i][1]} ‚ÇΩ"
    else:
        text += f"\n–¶–µ–Ω–∞: {tmp[2]} ‚ÇΩ"
    message_text = await callback.message.answer_photo(photo=str(tmp[0]), reply_markup=keyboard,
                                                       caption=text)
    cursor.execute(
        f"UPDATE login_id SET menuMessage='{message_text.message_id}' WHERE ID='{callback.message.chat.id}'")
    connect.commit()


@dp.callback_query_handler(Text(equals='menu_adds_size'))
async def menu_adds_size(callback: types.CallbackQuery, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    async with state.proxy() as data:
        cursor.execute(f"SELECT Name FROM menu WHERE ID='{data['item_id']}'")
        size = cursor.fetchone()[0]
    cursor.execute(f"SELECT size,price FROM item_size WHERE Type='{data['type']}' AND Pos_Name='{size}'")
    sizes = cursor.fetchall()
    for i in range(len(sizes)):
        keyboard.add(types.InlineKeyboardButton(f"{sizes[i][0]} {sizes[i][1]} ‚ÇΩ",
                                                callback_data=f"menu_sizes {sizes[i][0]}"))
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(Text(startswith='menu_sizes'))
async def menu_item_size(callback: types.CallbackQuery, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    async with state.proxy() as data:
        data['size'] = callback.data.split("menu_sizes ")[1]
        cursor.execute(f"SELECT * FROM adds WHERE Permission like '%{data['type']}%'")
    keyboard.add(types.InlineKeyboardButton(f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {callback.data.split("menu_sizes ")[1]}',
                                            callback_data=f"menu_adds_size"))
    if len(cursor.fetchall()) > 0:
        keyboard.add(
            types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', callback_data=f"menu_adds_item {data['item_id']}"))
    keyboard.row(types.InlineKeyboardButton('‚ûñ', callback_data='data_downgrade'),
                 types.InlineKeyboardButton(f"{data['amount']} —à—Ç.", callback_data=f"nothing"),
                 types.InlineKeyboardButton('‚ûï', callback_data='data_increase'))
    keyboard.add(types.InlineKeyboardButton('–í –∫–æ—Ä–∑–∏–Ω—É', callback_data=f"menu_send_cart"))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data="menu__item_back"))
    await callback.message.edit_reply_markup(reply_markup=keyboard)


@dp.callback_query_handler(Text(equals='data_downgrade'))
async def data_downgrade(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data['amount'] == 1:
            await callback.answer()
            return
        else:
            data['amount'] -= 1
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    cursor.execute(f"SELECT size,price FROM item_size WHERE Type='{data['type']}'")
    if len(cursor.fetchall()) > 0:
        if data['size'] is None:
            keyboard.add(types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä', callback_data=f"menu_adds_size"))
        else:
            keyboard.add(types.InlineKeyboardButton(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {data['size']}",
                                                    callback_data=f"menu_adds_size"))
    cursor.execute(f"SELECT * FROM adds WHERE Permission like '%{data['type']}%'")
    if len(cursor.fetchall()) > 0:
        keyboard.add(
            types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', callback_data=f"menu_adds_item {data['item_id']}"))
    keyboard.row(types.InlineKeyboardButton('‚ûñ', callback_data='data_downgrade'),
                 types.InlineKeyboardButton(f"{data['amount']} —à—Ç.", callback_data=f"nothing"),
                 types.InlineKeyboardButton('‚ûï', callback_data='data_increase'))
    keyboard.add(types.InlineKeyboardButton('–í –∫–æ—Ä–∑–∏–Ω—É', callback_data=f"menu_send_cart"))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data="menu__item_back"))
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(Text(equals='data_increase'))
async def data_increase(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['amount'] += 1
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    cursor.execute(f"SELECT size,price FROM item_size WHERE Type='{data['type']}'")
    if len(cursor.fetchall()) > 0:
        if data['size'] is None:
            keyboard.add(types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä', callback_data=f"menu_adds_size"))
        else:
            keyboard.add(types.InlineKeyboardButton(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {data['size']}",
                                                    callback_data=f"menu_adds_size"))
    cursor.execute(f"SELECT * FROM adds WHERE Permission like '%{data['type']}%'")
    if len(cursor.fetchall()) > 0:
        keyboard.add(
            types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', callback_data=f"menu_adds_item {data['item_id']}"))
    keyboard.row(types.InlineKeyboardButton('‚ûñ', callback_data='data_downgrade'),
                 types.InlineKeyboardButton(f"{data['amount']} —à—Ç.", callback_data=f"nothing"),
                 types.InlineKeyboardButton('‚ûï', callback_data='data_increase'))
    keyboard.add(types.InlineKeyboardButton('–í –∫–æ—Ä–∑–∏–Ω—É', callback_data=f"menu_send_cart"))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data="menu__item_back"))
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(Text(startswith='menu_adds_item'))
async def menu_adds_item(callback: types.CallbackQuery, state: FSMContext):
    cursor.execute(f"SELECT Name FROM menu WHERE ID='{callback.data.split('menu_adds_item ')[1]}'")
    name = cursor.fetchone()[0]
    async with state.proxy() as data:
        if data['size'] is None:
            await callback.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä')
            return
        cursor.execute(f"SELECT Name,Price FROM adds WHERE Permission like '%{data['type']}%'")
        data['adds'] = []
    adds = cursor.fetchall()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i in range(len(adds)):
        keyboard.add(types.InlineKeyboardButton(f"{adds[i][0]} {adds[i][1]} ‚ÇΩ",
                                                callback_data=f"menu_adds {adds[i][0]}"))
    keyboard.add(types.InlineKeyboardButton("–í –∫–æ—Ä–∑–∏–Ω—É", callback_data="menu_cart_send"))
    await callback.answer()
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–∫–∏ –≤ {name}', reply_markup=keyboard)
    cursor.execute(
        f"UPDATE login_id SET menuMessage='{callback.message.message_id + 1}' WHERE ID='{callback.message.chat.id}'")
    connect.commit()


@dp.callback_query_handler(Text(startswith='menu_adds'))
async def menu_adds(callback: types.CallbackQuery, state: FSMContext):
    add_name = callback.data.split('menu_adds ')[1]
    async with state.proxy() as data:
        data['adds'].append(add_name)
    await callback.answer(f'{add_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')


@dp.callback_query_handler(Text(equals='menu_cart_send'))
async def menu_cart_send(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        cursor.execute(f"SELECT Name FROM menu WHERE ID='{data['id']}'")
    name = cursor.fetchone()[0]
    cursor.execute(f"SELECT price FROM item_size WHERE Type='{data['type']}' AND size='{data['size']}'")
    price = cursor.fetchone()
    if not data['adds']:
        if price:
            cursor.execute(f"INSERT INTO cart(user_ID,Name,Size) VALUES({callback.message.chat.id},'{name}','{data['size']}')")
        else:
            cursor.execute(f"INSERT INTO cart(user_ID,Name) VALUES({callback.message.chat.id},'{name}')")
    else:
        if price:
            cursor.execute(f"INSERT INTO cart(user_ID,Name,Adds,Size) VALUES({callback.message.chat.id},'{name}','{','.join(data['adds'])}','{data['size']}')")
        else:
            cursor.execute(f"INSERT INTO cart(user_ID,Name,Adds) VALUES({callback.message.chat.id},'{name}','{','.join(data['adds'])}')")
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    await state.finish()
    await callback.answer('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')
    await callback.message.delete()
    await menu(callback.message)


@dp.callback_query_handler(Text(startswith='menu_send_cart'))
async def menu_send_cart(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data['size'] is None:
            await callback.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä')
            return
        cursor.execute(f"SELECT Name FROM menu WHERE ID='{data['id']}'")
        name = cursor.fetchone()[0]
        cursor.execute(f"SELECT price FROM item_size WHERE Type='{data['type']}' AND size='{data['size']}'")
        price = cursor.fetchone()
        if price:
            for i in range(data['amount']):
                cursor.execute(f"INSERT INTO cart(user_ID,Name,Size) VALUES({callback.message.chat.id},'{name}','{data['size']}')")
                connect.commit()
        else:
            for i in range(data['amount']):
                cursor.execute(f"INSERT INTO cart(user_ID,Name)"
                               f" VALUES({callback.message.chat.id}, '{name}')")
                connect.commit()
    await state.finish()
    await callback.answer('–í–∞—à —Ç–æ–≤–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    await callback.message.delete()
    await menu(callback.message)


@dp.callback_query_handler(Text(equals='menu__item_back'))
async def menu_item_back(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        name = data['type']
    cursor.execute(f"SELECT Name,ID FROM menu WHERE Type='{name}'")
    tmp = cursor.fetchall()
    item_id = []
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i in range(len(tmp)):
        cursor.execute(f"SELECT Photo,Description,Price,Name FROM menu WHERE ID='{tmp[i][1]}'")
        position = cursor.fetchone()
        if position[1] != "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
            message = await callback.message.answer_photo(photo=str(position[0]), caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {position[3]}"
                                                                                          f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {position[1]}"
                                                                                          f"\n–¶–µ–Ω–∞: {position[2]} ‚ÇΩ")
        else:
            message = await callback.message.answer_photo(photo=str(position[0]), caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {position[3]}"
                                                                                          f"\n–¶–µ–Ω–∞: {position[2]} ‚ÇΩ")
        message_id = message.message_id
        item_id.append(message_id)
        keyboard.add(types.InlineKeyboardButton(tmp[i][0], callback_data=f"menu_item {tmp[i][1]}"))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data="menu_return"))
    sended_message = await bot.send_message(callback.message.chat.id, text='–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä', reply_markup=keyboard)
    text = f"{sended_message.message_id},{','.join(map(str, item_id))}"
    cursor.execute(f"UPDATE login_id SET menuMessage='{text}' WHERE ID='{callback.message.chat.id}'")
    await callback.message.delete()
    connect.commit()


@dp.callback_query_handler(Text(startswith='menu_return'))
async def menu_return(callback: types.CallbackQuery):
    await callback.answer()
    cursor.execute(f"SELECT menuMessage FROM login_id WHERE ID='{callback.message.chat.id}'")
    message = cursor.fetchone()[0].split(',')
    for i in range(len(message)):
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=int(message[i]))
        except:
            pass
    await menu(callback.message)


@dp.message_handler(Text(equals='–ö–æ—Ä–∑–∏–Ω–∞üõí'), chat_type='private')
async def cart(message: types.Message):
    cursor.execute(f"SELECT Name,Adds,Size FROM cart WHERE user_ID='{message.chat.id}'")
    items = cursor.fetchall()
    cart_price = 0
    cursor.execute(f"SELECT menuStatus FROM login_id WHERE ID='{message.chat.id}'")
    status = cursor.fetchone()
    if status[0] == '1' and message.text == '–ö–æ—Ä–∑–∏–Ω–∞üõí':
        cursor.execute(f"SELECT menuMessage FROM login_id WHERE ID='{message.chat.id}'")
        user_message = cursor.fetchone()[0].split(',')
        for i in range(len(user_message)):
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=int(user_message[i]))
            except:
                pass
    if len(items) > 0:
        await message.answer('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ')
        for i in range(len(items)):
            item_adds_price = 0
            if items[i][2] is not None:
                cursor.execute(f"SELECT Price FROM item_size WHERE Pos_Name='{items[i][0]}' AND size='{items[i][2]}'")
                size = 1
            else:
                cursor.execute(f"SELECT Price FROM menu WHERE Name='{items[i][0]}'")
                size = 0
            item_price = cursor.fetchone()[0]
            if items[i][1]:
                item_adds = items[i][1].split(',')
                for j in range(len(item_adds)):
                    cursor.execute(f"SELECT Price from adds where Name='{item_adds[j]}'")
                    item_adds_price += cursor.fetchone()[0]
                if size == 0:
                    await message.answer(
                        f"{i + 1}. {items[i][0]}\n–î–æ–±–∞–≤–∫–∏: {items[i][1]}\n–°—É–º–º–∞: {item_adds_price + item_price} ‚ÇΩ")
                else:
                    await message.answer(
                        f"{i + 1}. {items[i][0]} {items[i][2]}\n–î–æ–±–∞–≤–∫–∏: {items[i][1]}\n–°—É–º–º–∞: {item_adds_price + item_price} ‚ÇΩ")
            else:
                item_adds_price = 0
                if size == 0:
                    await message.answer(f"{i + 1}. {items[i][0]}\n–°—É–º–º–∞: {item_price} ‚ÇΩ")
                else:
                    await message.answer(f"{i + 1}. {items[i][0]} {items[i][2]}\n–°—É–º–º–∞: {item_price} ‚ÇΩ")
            cart_price += item_adds_price + item_price
        if fifteenPercent == 1:
            cart_price = round(cart_price * 0.85)
            await message.answer(f"–ü—Ä–æ–º–æ–∞–∫—Ü–∏—è —Å–Ω–∏–∑–∏–ª–∞ –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –Ω–∞ 15%")
        cursor.execute(f"SELECT OrdersSum FROM login_id WHERE ID={message.chat.id}")
        orderssum = cursor.fetchone()
        if orderssum[0] >= 5000:
            cart_price = round(cart_price * 0.9)
            await message.answer(f"–ù–∞ –≤–∞—à –∑–∞–∫–∞–∑ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 10% –∑–∞ —Å—É–º–º—É –∑–∞–∫–∞–∑–æ–≤ —Å–≤—ã—à–µ 5000.")
        else:
            if 5000 - (orderssum[0] + cart_price) > 0:
                await message.answer(f"–ù–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç–µ –∑–∞–∫–∞–∑—ã –Ω–∞ —Å—É–º–º—É 5000 ‚ÇΩ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –°–ö–ò–î–ö–£ 10% –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑. –í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å {5000 - (orderssum[0] + cart_price)}‚ÇΩ")
            elif 5000 - (orderssum[0] + cart_price) < 0:
                await message.answer(f"–° —É—á—ë—Ç–æ–º —Å—É–º–º—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞, –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–∫–∏–¥–∫–∞ 10%!")
        if fifteenPercent == 1:
            cart_price *= 0.85
            await message.answer(f"–ü—Ä–æ–º–æ–∞–∫—Ü–∏—è —Å–Ω–∏–∑–∏–ª–∞ –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –Ω–∞ 15%")
        await message.answer(f'–û–±—â–∞—è —Å—É–º–º–∞ c –¥–æ—Å—Ç–∞–≤–∫–æ–π {cart_price + delivery_price} ‚ÇΩ'
                             f'\n–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ {cart_price} ‚ÇΩ')
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton('–î–∞', callback_data=f"cart_payment_menu {cart_price}"))
        keyboard.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é', callback_data='cart_position_delete'))
        keyboard.add(types.InlineKeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='cart_clear'))
        keyboard.add(types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='cart_return'))
        sended_message = await message.answer('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', reply_markup=keyboard)
        cursor.execute(
            f"UPDATE login_id SET menuStatus='1', menuMessage='{sended_message.message_id}' WHERE ID='{message.chat.id}'")
        connect.commit()
    else:
        cursor.execute(
            f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{message.chat.id}'")
        connect.commit()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        buttons = ['–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤üñå', '–ú–µ–Ω—éüçΩ', '–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞üÜò', '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞üîç', '–ö–æ—Ä–∑–∏–Ω–∞üõí',
                   '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å‚úè', '–í –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é‚Ü©']
        keyboard.add(*buttons)
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith='cart_payment_menu'))
async def cart_payment_menu(callback: types.CallbackQuery):
    if datetime.now().hour < 10 or datetime.now().hour > 22 and datetime.now().minute != 0:
        await callback.answer('–ú—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–º –í–∞—à –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å 10:00 –¥–æ 22:00. –° –£–≤–∞–∂–µ–Ω–∏–µ–º, –í–∞—à Burgertek!',show_alert=True)
        return
    cursor.execute(f"SELECT –ò–º—è FROM login_id WHERE ID={callback.message.chat.id}")
    ban_or_not = cursor.fetchone()
    if ban_or_not[0] == 'Banned':
        await callback.message.answer("–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã.")
    else:
        if not work_shift:
            await callback.answer('–ú—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–º –í–∞—à –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å 10:00 –¥–æ 22:00. –° –£–≤–∞–∂–µ–Ω–∏–µ–º, –í–∞—à Burgertek!', show_alert=True)
            return
        cursor.execute(
            f"UPDATE cart_data SET –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π='–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',–í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏='–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',–°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã='–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',–°—É–º–º–∞_–ó–∞–∫–∞–∑–∞='{callback.data.split('cart_payment_menu ')[1]}',Difference='0' WHERE ID='{callback.message.chat.id}'")
        connect.commit()
        await callback.message.delete()
        await cart__payment_menu(callback.message)


@dp.message_handler(chat_type='private', commands='givechatid')
async def givechatid(message: types.Message):
    await message.answer(message.chat.id)


async def cart__payment_menu(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    cursor.execute(
        f"SELECT –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π,–ê–¥—Ä–µ—Å,–¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏,–í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏,–ê–¥—Ä–µ—Å,–°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã FROM cart_data where ID='{message.chat.id}'")
    user = cursor.fetchone()
    keyboard.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', callback_data='cart_payment_delivery'))
    keyboard.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏', callback_data='cart_payment_delivery_time'))
    keyboard.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –æ–ø–ª–∞—Ç—ã', callback_data='cart_payment_type'))
    if user[0] == '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç':
        keyboard.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É', callback_data='cart_payment_comment'))
    else:
        keyboard.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data='cart_payment_comment'))
    keyboard.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', callback_data='cart_payment_confirming'))
    if user[2] == '–°–∞–º–æ–≤—ã–≤–æ–∑':
        await message.answer(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n"
                             f"–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {user[2]}\n"
                             f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {user[3]}\n"
                             f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {user[5]}\n"
                             f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É(–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω): {user[0]}", reply_markup=keyboard)
    else:
        await message.answer(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n"
                             f"–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {user[2]}\n"
                             f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {user[4]}\n"
                             f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {user[3]}\n"
                             f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {user[5]}\n"
                             f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É(–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω): {user[0]}", reply_markup=keyboard)
    cursor.execute(
        f"UPDATE login_id SET menuMessage='{message.message_id + 1}' WHERE ID='{message.chat.id}'")
    connect.commit()


@dp.callback_query_handler(Text(equals='cart_payment_confirming'))
async def cart_payment_confirming(callback: types.CallbackQuery):
    if datetime.now().hour > 21:
        await callback.answer("–ú—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–º –í–∞—à –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å 10:00 –¥–æ 22:00. –° –£–≤–∞–∂–µ–Ω–∏–µ–º, –í–∞—à Burgertek!", show_alert=True)
        return
    cursor.execute(
        f"SELECT –ê–¥—Ä–µ—Å,–¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏,–í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏,–ê–¥—Ä–µ—Å,–°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã FROM cart_data where ID='{callback.message.chat.id}'")
    user = cursor.fetchone()
    for i in range(len(user)):
        if user[i] == '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç':
            await callback.answer('–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö')
            return
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    await callback.message.edit_text('–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª—É.\n'
                                     '–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç ‚úâÔ∏è')
    cursor.execute(f"SELECT Name,Adds,Size FROM cart WHERE user_ID='{callback.message.chat.id}'")
    items = cursor.fetchall()
    positions = []
    item_dict = {}
    text = '–ü–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑–µ\n'
    for i in range(len(items)):
        cursor.execute(f"SELECT Type FROM menu WHERE Name='{items[i][0]}'")
        item_type = cursor.fetchone()[0]
        if item_dict.get(f'{item_type}') is None:
            item_dict[f'{item_type}'] = 1
        else:
            item_dict[f'{item_type}'] += 1
        if items[i][1] is not None:
            if items[i][2] is not None:
                text += f"{i + 1}. {items[i][0]}_{items[i][2]}\n–î–æ–±–∞–≤–∫–∏:{items[i][1]}\n"
                positions.append(f"{items[i][0]}_{items[i][2]} –î–æ–±–∞–≤–∫–∏:{items[i][1]}")
            else:
                text += f"{i + 1}. {items[i][0]}\n–î–æ–±–∞–≤–∫–∏:{items[i][1]}\n"
                positions.append(f"{items[i][0]} –î–æ–±–∞–≤–∫–∏:{items[i][1]}")
        else:
            if items[i][2] is not None:
                text += f"{i + 1}. {items[i][0]}_{items[i][2]}\n"
                positions.append(f"{items[i][0]}_{items[i][2]}")
            else:
                text += f"{i + 1}. {items[i][0]}\n"
                positions.append(f"{items[i][0]}")
    keys = []
    for i in item_dict.keys():
        keys.append(i)
    cursor.execute(
        f"SELECT –°—É–º–º–∞_–ó–∞–∫–∞–∑–∞,–ê–¥—Ä–µ—Å,–í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏,–°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã,–¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏,–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π,Difference FROM cart_data WHERE ID='{callback.message.chat.id}'")
    user = cursor.fetchall()[0]
    if user[4] != '–°–∞–º–æ–≤—ã–≤–æ–∑':
        user = list(user)
        user[0] = int(float(user[0])) + 150
        user = tuple(user)
    text += f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {user[0]} ‚ÇΩ\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {user[3]}\n"
    if user[4] != '–°–∞–º–æ–≤—ã–≤–æ–∑':
        text += f"–¢–∏–ø –î–æ—Å—Ç–∞–≤–∫–∏: {user[4]}\n–ê–¥—Ä–µ—Å: {user[1]}"
    else:
        text += f"–¢–∏–ø –î–æ—Å—Ç–∞–≤–∫–∏: {user[4]}"
    if user[5] != '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç':
        text += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {user[5]}"
    cursor.execute(f"UPDATE cart_data SET Callback='{callback.message.chat.id};{user[0]};{user[2]};{user[3]};{user[6]}' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    cursor.execute(f"SELECT –ò–º—è,–¢–µ–ª–µ—Ñ–æ–Ω FROM login_id WHERE ID={callback.message.chat.id}")
    _user = cursor.fetchone()
    cursor.execute(
        f"INSERT INTO orders (User_ID, Status, List, Price,–°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã, –ê–¥—Ä–µ—Å, –¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏, –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, Data, –¢–µ–∫—Å—Ç) VALUES ({callback.message.chat.id}, '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ', '{';'.join(positions)}', '{user[0]}', '{user[3]}', '{user[1]}', '{user[4]}', '{user[2]}', '{user[5]}', '{datetime.today().date()}', '–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑ –æ—Ç: {callback.message.chat.id}\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {_user[0]}\n–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: {_user[1]}\n{text}')")
    connect.commit()
    cursor.execute("SELECT ID FROM orders ORDER BY id DESC LIMIT 1")
    order_id = cursor.fetchone()[0]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order_accept {callback.message.chat.id} {order_id}"))
    keyboard.add(
        types.InlineKeyboardButton("–û—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order_decline {callback.message.chat.id} {order_id}"))
    message_obj = await bot.send_message(chat_id=-1001590114672, text=f"–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑ –æ—Ç: {callback.message.chat.id}\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {_user[0]}\n–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: {_user[1]}\n{text}\n–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {user[2]}",
                                         reply_markup=keyboard)
    cursor.execute(f"UPDATE orders SET messageid = {message_obj.message_id}, callback = '{callback.message.chat.id};{user[0]};{user[2]};{user[3]};{user[6]}' WHERE ID={order_id}")
    connect.commit()
    cursor.execute(f"DELETE FROM cart WHERE user_ID='{callback.message.chat.id}'")
    connect.commit()


@dp.callback_query_handler(Text(startswith='order_accept '))
async def order_accept(callback: types.CallbackQuery, state: FSMContext):
    order_id = callback.data.split(' ')[2]
    cursor.execute(f"SELECT callback FROM orders WHERE id={order_id}")
    user_info = cursor.fetchone()[0].split(';')
    async with state.proxy() as data:
        data['user_time'] = user_info[2]
    if user_info[2] == '–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ':
        delivery_type = 1
        current_time = '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        cursor.execute(
            f"UPDATE orders SET Status='–ì–æ—Ç–æ–≤–∏—Ç—Å—è',–°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã='–æ–∂–∏–¥–∞–µ—Ç—Å—è',deliveryType='{delivery_type}',startCooking='–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' WHERE ID={order_id}")
        connect.commit()
    else:
        delivery_type = 0
        current_time = user_info[2]
        cursor.execute(
            f"UPDATE orders SET Status='–ì–æ—Ç–æ–≤–∏—Ç—Å—è',–°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã='–æ–∂–∏–¥–∞–µ—Ç—Å—è',deliveryType='{delivery_type}',startCooking='{current_time}' WHERE id={order_id}")
        connect.commit()
    cursor.execute(f"SELECT –¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏ FROM cart_data WHERE ID='{callback.data.split(' ')[1]}'")
    user_delivery_type = cursor.fetchone()[0]
    cursor.execute(f"SELECT –¢–µ–∫—Å—Ç FROM orders WHERE id={order_id}")
    user_text = cursor.fetchone()[0]
    cursor.execute(f"SELECT OrdersSum FROM login_id WHERE ID={user_info[0]}")
    z = cursor.fetchone()
    if z[0] >= 5000:
        cursor.execute(f"UPDATE login_id SET OrdersSum=0 WHERE ID={user_info[0]}")
        connect.commit()
    if user_info[3] == '–ö–∞—Ä—Ç–æ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ' or user_info[3] == '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É':
        text = f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n{user_text}\n–í—Ä–µ–º—è –î–æ—Å—Ç–∞–≤–∫–∏: {user_info[2]}"
        await callback.message.edit_text(f"{text}\n–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: –æ–∂–∏–¥–∞–µ—Ç—Å—è")
    else:
        text = f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n{user_text}\n–í—Ä–µ–º—è –î–æ—Å—Ç–∞–≤–∫–∏: {user_info[2]}"
        await callback.message.edit_text(text)
    cursor.execute(f"UPDATE orders SET –¢–µ–∫—Å—Ç='{text}' WHERE id={order_id}")
    connect.commit()
    if user_info[3] == '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É':
        await bot.send_message(chat_id=user_info[0], text=f"–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç :)\n"
                                                          f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–º.\n"
                                                          f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ {user_info[1]} ‚ÇΩ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º 89118059320, –î–µ—Ä–∂–∞—Ç–µ–ª—å –ó–∏–Ω–æ–≤–∏–π –î–º–∏—Ç—Ä–∏–µ–≤–∏—á –ë.\n"
                                                          f"–ß–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã")
        await asyncio.sleep(30)
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f"order_transfer_accept {order_id}"))
        await bot.send_message(chat_id=user_info[0], text='–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã –≤ –æ–ø–ª–∞—Ç–µ',
                               reply_markup=keyboard)
    elif user_info[3] == '–ö–∞—Ä—Ç–æ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ':
        prices = []
        cursor.execute(f"SELECT List FROM orders WHERE id={order_id}")
        user_list = cursor.fetchone()[0].split(';')
        for i in range(len(user_list)):
            if len(user_list[i].split(' –î–æ–±–∞–≤–∫–∏:')) > 1:
                temp = user_list[i].split(' –î–æ–±–∞–≤–∫–∏:')
                if len(temp[0].split('_')) > 1:
                    cursor.execute(f"SELECT Price FROM item_size WHERE size='{temp[0].split('_')[1]}'")
                else:
                    cursor.execute(f"SELECT Price FROM menu WHERE Name='{temp[0]}'")
                local_price = int(cursor.fetchone()[0])
                adds = temp[1].split(',')
                for j in range(len(adds)):
                    cursor.execute(f"SELECT Price FROM adds WHERE Name='{adds[j]}'")
                    local_price += int(cursor.fetchone()[0])
                    cursor.execute(f"SELECT OrdersSum FROM login_id WHERE ID={user_info[0]}")
                    orderssum = cursor.fetchone()
                    if orderssum[0] >= 5000:
                        local_price = round(int(local_price * 0.9))
                prices.append(LabeledPrice(label=f"{temp[0]}\n–î–æ–±–∞–≤–∫–∏: {temp[1]}", amount=int(local_price * 100)))
            else:
                if len(user_list[i].split('_')) > 1:
                    item = user_list[i].split('_')
                    cursor.execute(f"SELECT Price FROM item_size WHERE Pos_Name='{item[0]}' AND size='{item[1]}'")
                else:
                    cursor.execute(f"SELECT Price FROM menu WHERE Name='{user_list[i]}'")
                price = cursor.fetchone()
                cursor.execute(f"SELECT OrdersSum FROM login_id WHERE ID={user_info[0]}")
                orderssum = cursor.fetchone()
                if orderssum[0] >= 5000:
                    price[0] = round(price[0] * 0.9)
                if fifteenPercent == 1:
                    price[0] = round(price[0] * 0.85)
                if len(user_list[i].split('_')) > 1:
                    prices.append(LabeledPrice(label=f"{' '.join(user_list[i].split('_'))}", amount=int(price[0] * 100)))
                else:
                    prices.append(LabeledPrice(label=f"{user_list[i]}", amount=int(price[0] * 100)))
        if user_delivery_type != '–°–∞–º–æ–≤—ã–≤–æ–∑':
            prices.append(LabeledPrice(label='–î–æ—Å—Ç–∞–≤–∫–∞', amount=delivery_price*100))
        await bot.send_message(chat_id=user_info[0], text=f"–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç :)\n"
                                                          f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ.\n"
                                                          f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞.")
        async with state.proxy() as data:
            data['user_id'] = user_info[0]
            data['user_delivery_type'] = user_delivery_type
            data['current_time'] = current_time
        await bot.send_invoice(chat_id=str(user_info[0]),
                               title='–ó–∞–∫–∞–∑',
                               description='–û–ø–∏—Å–∞–Ω–∏–µ',
                               provider_token=PAYMENT_TOKEN,
                               currency='rub',
                               photo_url="https://i.postimg.cc/htbGdDRz/2022-09-19-12-37-22.jpg",
                               photo_height=256,
                               photo_width=256,
                               photo_size=256,
                               is_flexible=False,
                               prices=prices,
                               start_parameter='Enable',
                               payload=f"{order_id};{data['current_time']};{data['user_id']};{data['user_delivery_type']};{data['user_time']}")
    else:
        if user_delivery_type == '–°–∞–º–æ–≤—ã–≤–æ–∑':
            if data['user_time'] == '–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ':
                await bot.send_message(chat_id=user_info[0],
                                       text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑! –ñ–¥—ë–º –í–∞—Å –≤ —Ç–µ—á–µ–Ω–∏–µ {interval_time} –º–∏–Ω—É—Ç –ø–æ –∞–¥—Ä–µ—Å—É –≥.–ü–æ–ª—è—Ä–Ω—ã–π,—É–ª.–ì–∞–¥–∂–∏–µ–≤–∞ 11 ")
            else:
                await bot.send_message(chat_id=user_info[0],text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑! –ñ–¥—ë–º –≤–∞—Å –≤ {current_time} –ø–æ –∞–¥—Ä–µ—Å—É –≥.–ü–æ–ª—è—Ä–Ω—ã–π,—É–ª.–ì–∞–¥–∂–∏–µ–≤–∞ 11.")
        else:
            if data['user_time'] == '–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ':
                await bot.send_message(chat_id=user_info[0],
                                       text=f"–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª—É. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ {interval_time} –º–∏–Ω—É—Ç.")
            else:
                await bot.send_message(chat_id=user_info[0],
                                       text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑! –û–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫ {current_time}.")


@dp.pre_checkout_query_handler(lambda q: True)
async def checkout_process(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: Message):
    user_info = message.successful_payment.invoice_payload.split(';')
    print(user_info)
    cursor.execute(f"UPDATE orders SET –°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã='–û–ø–ª–∞—á–µ–Ω' WHERE ID={user_info[0]}")
    connect.commit()
    cursor.execute(f"SELECT messageID,–¢–µ–∫—Å—Ç,–¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏ FROM orders WHERE ID='{user_info[0]}'")
    user = cursor.fetchone()
    messageID = user[1] + '\n–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: –û–ø–ª–∞—á–µ–Ω'
    await bot.edit_message_text(chat_id=-1001590114672, message_id=user[0], text=messageID)
    chat_id = user_info[2]
    current_time = user_info[1]
    user_time = user_info[4]
    if user_info[3] == '–°–∞–º–æ–≤—ã–≤–æ–∑':
        if user_time == '–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ':
            await bot.send_message(chat_id=chat_id,
                                   text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑! –ñ–¥—ë–º –í–∞—Å –≤ —Ç–µ—á–µ–Ω–∏–µ {interval_time} –º–∏–Ω—É—Ç –ø–æ –∞–¥—Ä–µ—Å—É –≥.–ü–æ–ª—è—Ä–Ω—ã–π,—É–ª.–ì–∞–¥–∂–∏–µ–≤–∞ 11 ")
        else:
            await bot.send_message(chat_id=chat_id,
                                   text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑! –ñ–¥—ë–º –≤–∞—Å –≤ {current_time} –ø–æ –∞–¥—Ä–µ—Å—É –≥.–ü–æ–ª—è—Ä–Ω—ã–π,—É–ª.–ì–∞–¥–∂–∏–µ–≤–∞ 11.")
    else:
        if user_time == '–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ':
            await bot.send_message(chat_id=chat_id,
                                   text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑! –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ {interval_time} –º–∏–Ω—É—Ç\n"
                                        "–ú—ã —Å–æ–æ–±—â–∏–º –í–∞–º –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∫—É—Ä—å–µ—Ä –∑–∞–±–µ—Ä–µ—Ç –∑–∞–∫–∞–∑.")
        else:
            await bot.send_message(chat_id=chat_id,
                                   text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑! –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫ {current_time}\n"
                                        "–ú—ã —Å–æ–æ–±—â–∏–º –í–∞–º –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∫—É—Ä—å–µ—Ä –∑–∞–±–µ—Ä–µ—Ç –∑–∞–∫–∞–∑.")
    global this_day
    cursor.execute(
        f"SELECT ID, User_ID, Status, List, Price, –°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã, –ê–¥—Ä–µ—Å, –¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏, –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã, Data, CurierID FROM orders")
    info = cursor.fetchall()
    cursor.execute(f'SELECT "–°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã", SUM(price) FROM orders GROUP BY "–°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã"')
    money_buy_type = cursor.fetchall()
    tmp = '"–°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã"'
    cursor.execute(f"SELECT SUM(price) FROM orders WHERE status!='–û—Ç–º–µ–Ω—ë–Ω' AND {tmp}='–û–ø–ª–∞—á–µ–Ω'")
    money = cursor.fetchone()[0]
    cursor.execute(f"SELECT COUNT(*) FROM orders WHERE status!='–û—Ç–º–µ–Ω—ë–Ω'")
    cancels_amount = cursor.fetchone()[0]
    array = [["" for j in range(1)] for i in range(len(info))]
    for i in range(len(info)):
        if info[i][2] == '–ó–∞–≤–µ—Ä—à—ë–Ω':
            array[i][0] = str(info[i][4])
    results = service.spreadsheets().values().batchUpdate(spreadsheetId=spreadsheetId, body={
        "valueInputOption": "RAW",
        "data": [
            {"range": f"{this_day}!A1", 'values': [
                ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', '–í—ã—Ä—É—á–∫–∞ –∑–∞ –¥–µ–Ω—å'],
                [len(info), cancels_amount, money]
            ]},
            {"range": f"{this_day}!A3", 'values': money_buy_type},
            {"range": f"{this_day}!A5",
             "values": [
                 ['ID –∑–∞–∫–∞–∑–∞', 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', '–ü–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑–µ', '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞', '–°–ø–æ—Å–æ–± –û–ø–ª–∞—Ç—ã',
                  '–ê–¥—Ä–µ—Å', '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', '–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã', '–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞',
                  'ID –∫—É—Ä—å–µ—Ä–∞, –¥–æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –∑–∞–∫–∞–∑', '–ò–¢–û–ì–û'],
             ]},
            {"range": f"{this_day}!A6", 'values': info
             },
            {"range": f"{this_day}!N6", 'values': array}
        ]
    }).execute()
    cursor.execute(f"SELECT User_ID, Price FROM orders WHERE ID={user_info[0]}")
    userid = cursor.fetchone()
    cursor.execute(f"SELECT OrdersSum FROM login_id WHERE ID={userid[0]}")
    z = cursor.fetchone()
    if z[0] >= 5000:
        cursor.execute(f"UPDATE login_id SET OrdersSum=0 WHERE ID={userid[0]}")
        connect.commit()


@dp.callback_query_handler(Text(startswith='order_transfer_accept '))
async def order_transfer_accept(callback: types.CallbackQuery):
    order_id = callback.data.split('order_transfer_accept ')[1]
    cursor.execute(
        f"UPDATE orders SET –°—Ç–∞—Ç—É—Å_–û–ø–ª–∞—Ç—ã='–û–ø–ª–∞—á–µ–Ω' WHERE ID={order_id}")
    connect.commit()
    cursor.execute(f"SELECT messageID,–¢–µ–∫—Å—Ç FROM orders WHERE ID='{order_id}'")
    user = cursor.fetchone()
    messageID = user[1] + '\n–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: –û–ø–ª–∞—á–µ–Ω'
    await bot.edit_message_text(chat_id=-723156318, message_id=user[0], text=messageID)
    await callback.message.delete()
    cursor.execute(f"SELECT User_ID, Price FROM orders WHERE ID={order_id}")
    userid = cursor.fetchone()
    cursor.execute(f"SELECT OrdersSum FROM login_id WHERE ID={userid[0]}")
    z = cursor.fetchone()
    if z[0] >= 5000:
        cursor.execute(f"UPDATE login_id SET OrdersSum=0 WHERE ID={userid[0]}")
        connect.commit()
    cursor.execute(f"UPDATE login_id SET OrdersSum=OrdersSum+{userid[1]} WHERE ID={userid[0]}")
    connect.commit()
    cursor.execute(f"SELECT –¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏,–í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏ FROM orders WHERE ID='{order_id}'")
    delivery_info = cursor.fetchone()
    if delivery_info[0] == '–°–∞–º–æ–≤—ã–≤–æ–∑':
        if delivery_info[1] == '–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ':
            await bot.send_message(chat_id=callback.message.chat.id,
                                   text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑! –ñ–¥—ë–º –í–∞—Å –≤ —Ç–µ—á–µ–Ω–∏–µ {interval_time} –º–∏–Ω—É—Ç –ø–æ –∞–¥—Ä–µ—Å—É –≥.–ü–æ–ª—è—Ä–Ω—ã–π,—É–ª.–ì–∞–¥–∂–∏–µ–≤–∞ 11 ")
        else:
            await bot.send_message(chat_id=callback.message.chat.id,
                                   text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑! –ñ–¥—ë–º –≤–∞—Å –≤ {delivery_info[1]} –ø–æ –∞–¥—Ä–µ—Å—É –≥.–ü–æ–ª—è—Ä–Ω—ã–π,—É–ª.–ì–∞–¥–∂–∏–µ–≤–∞ 11.")
    else:
        if delivery_info[1] == '–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ':
            await bot.send_message(chat_id=callback.message.chat.id,
                                   text=f"–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª—É. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ {interval_time} –º–∏–Ω—É—Ç.")
        else:
            await bot.send_message(chat_id=callback.message.chat.id,
                                   text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑! –û–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫ {delivery_info[1]}")


@dp.callback_query_handler(Text(startswith='order_decline'))
async def order_decline(callback: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    call_info = callback.data.split('order_decline ')[1]
    user_info = call_info.split(' ')[1]
    keyboard.add(types.InlineKeyboardButton('–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–∞–ª–∏—á–∏–∏', callback_data=f"order_absent {user_info}"))
    await callback.message.edit_text(text='–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(Text(startswith='order_absent'))
async def order_decline_absent(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['absent'] = []
    order_id = callback.data.split('order_absent ')[1]
    cursor.execute(f"SELECT List FROM orders WHERE ID='{order_id}'")
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    positions = cursor.fetchone()[0].split(';')
    for i in range(len(positions)):
        keyboard.add(types.InlineKeyboardButton(f"{positions[i]}", callback_data=f"absent_position;{i};{order_id}"))
    keyboard.add(
        types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data=f"order_end;{order_id};"))
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(Text(startswith="absent_position;"))
async def absent_position(callback: types.CallbackQuery, state: FSMContext):
    user_info = callback.data.split(';')
    cursor.execute(f"SELECT List FROM orders WHERE ID='{user_info[2]}'")
    user_list = cursor.fetchone()[0].split(';')
    for i in range(len(user_list)):
        if i == int(user_info[1]):
            async with state.proxy() as data:
                data['absent'].append(user_list[i])
            user_list.pop(i)
            break
    cursor.execute(f"UPDATE orders SET List='{';'.join(user_list)}' WHERE ID={user_info[2]}")
    connect.commit()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i in range(len(user_list)):
        keyboard.add(
            types.InlineKeyboardButton(f"{user_list[i]}", callback_data=f"absent_position;{i};{user_info[2]}"))
    keyboard.add(types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data=f"order_end;{user_info[2]}"))
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(Text(startswith='order_end;'))
async def order_end(callback: types.CallbackQuery, state: FSMContext):
    order_id = callback.data.split('order_end;')[1]
    cursor.execute(f"SELECT List FROM orders WHERE ID={order_id}")
    user_list = cursor.fetchone()[0].split(';')
    cursor.execute(f"SELECT User_ID FROM orders WHERE ID={order_id}")
    user_id = cursor.fetchone()[0]
    cursor.execute(f"DELETE FROM cart WHERE user_ID='{user_id}'")
    connect.commit()
    for i in range(len(user_list)):
        item = user_list[i].split(' –î–æ–±–∞–≤–∫–∏:')
        if item[0] == '':
            break
        if len(item) > 1:
            item_size = None
            item_adds = item[1]
            if len(item[0].split('_')) > 1:
                item = item[0].split('_')
                item_size = item[1]
            item_name = item[0]
            if item_size is None:
                cursor.execute(
                    f"INSERT INTO cart(user_ID,Name,Adds) VALUES({user_id},'{item_name}','{item_adds}')")
            else:
                cursor.execute(
                    f"INSERT INTO cart(user_ID,Name,Adds,Size) VALUES({user_id},'{item_name}','{item_adds}','{item_size}')")
            connect.commit()
        else:
            if len(item[0].split('_')) > 1:
                item = item[0].split('_')
                cursor.execute(f"INSERT INTO cart(user_ID,Name,Size) VALUES({user_id},'{item[0]}','{item[1]}')")
            else:
                cursor.execute(f"INSERT INTO cart(user_ID,Name) VALUES({user_id},'{item[0]}')")
            connect.commit()
    cursor.execute(f"DELETE FROM orders WHERE ID={order_id}")
    connect.commit()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é', callback_data='cart_end_menu'))
    keyboard.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data='cart_end_cart'))
    text = ''
    async with state.proxy() as data:
        for i in range(len(data['absent'])):
            text += f"{i + 1}.{data['absent'][i]} \n"
        await bot.send_message(user_id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å:"
                                        f"\n{text}–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–∞ –∑–∞–º–µ–Ω—É –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –±–µ–∑ —ç—Ç–∏—Ö –ø–æ–∑–∏—Ü–∏–π. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.",
                               reply_markup=keyboard)
    await state.finish()
    await callback.answer('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω')
    await callback.message.delete()


@dp.callback_query_handler(Text(equals='cart_end_cart'))
async def cart_end_menu(callback: types.CallbackQuery):
    await callback.answer('–í—ã –±—ã–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É')
    await callback.message.delete()
    await cart(callback.message)


@dp.callback_query_handler(Text(equals='cart_end_menu'))
async def cart_end_menu(callback: types.CallbackQuery):
    await callback.answer('–í—ã –±—ã–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –º–µ–Ω—é')
    await callback.message.delete()
    await menu(callback.message)


@dp.callback_query_handler(Text(equals='cart_payment_type'))
async def cart_payment_type(callback: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    cursor.execute(f"SELECT –¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏ FROM cart_data WHERE ID='{callback.message.chat.id}'")
    if cursor.fetchone()[0] == '–°–∞–º–æ–≤—ã–≤–æ–∑':
        keyboard.add(types.InlineKeyboardButton('–ö–∞—Ä—Ç–æ–π –Ω–∞ –º–µ—Å—Ç–µ', callback_data='cart__payment_type –ö–∞—Ä—Ç–æ–π –Ω–∞ –º–µ—Å—Ç–µ'))
        keyboard.add(
            types.InlineKeyboardButton('–ù–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞ –º–µ—Å—Ç–µ', callback_data='cart__payment_type –ù–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞ –º–µ—Å—Ç–µ'))
    else:
        keyboard.add(
            types.InlineKeyboardButton('–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É', callback_data='cart__payment_type –ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É'))
        keyboard.add(types.InlineKeyboardButton('–ö–∞—Ä—Ç–æ–π –∫—É—Ä—å–µ—Ä—É', callback_data='cart__payment_type –ö–∞—Ä—Ç–æ–π –∫—É—Ä—å–µ—Ä—É'))
    keyboard.add(types.InlineKeyboardButton('–û–Ω–ª–∞–π–Ω', callback_data='cart__payment_type –û–Ω–ª–∞–π–Ω'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data='cart__payment_back'))
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(Text(equals='cart__payment_back'))
async def cart__payment_back(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.delete()
    await cart__payment_menu(callback.message)


@dp.callback_query_handler(Text(startswith='cart__payment_type'))
async def cart__payment_type(callback: types.CallbackQuery):
    payment_type = callback.data.split('cart__payment_type ')[1]
    if payment_type != '–û–Ω–ª–∞–π–Ω':
        if payment_type == "–ö–∞—Ä—Ç–æ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ":
            payment_type = "cashoncurier"
        elif payment_type == "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É":
            payment_type = "cardtransfer"
        elif payment_type == "–ù–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞ –º–µ—Å—Ç–µ":
            payment_type = "cashonplace"
        elif payment_type == "–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É":
            payment_type = "cashoncurier"
        elif payment_type == "–ö–∞—Ä—Ç–æ–π –∫—É—Ä—å–µ—Ä—É":
            payment_type = "cardoncurier"
        elif payment_type == "–ö–∞—Ä—Ç–æ–π –Ω–∞ –º–µ—Å—Ç–µ":
            payment_type = "cardonplace"
        cursor.execute(f"SELECT available FROM payments WHERE name='{payment_type}'")
        if cursor.fetchone()[0] is False:
            await callback.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', show_alert=True)
            return
        cursor.execute(f"UPDATE cart_data SET –°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã='{callback.data.split('cart__payment_type ')[1]}'")
        connect.commit()
        await callback.answer('–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω')
        await callback.message.delete()
        await cart__payment_menu(callback.message)
    else:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton('–ö–∞—Ä—Ç–æ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ', callback_data='cart___payment_type –ö–∞—Ä—Ç–æ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ'))
        keyboard.add(
            types.InlineKeyboardButton('–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É', callback_data='cart___payment_type –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É'))
        keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data='cart___payment_back'))
        await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç—ã', reply_markup=keyboard)


@dp.callback_query_handler(Text(equals='cart___payment_back'))
async def cart___payment_back(callback: types.CallbackQuery):
    await cart_payment_type(callback)
    await callback.answer()


@dp.callback_query_handler(Text(startswith='cart___payment_type'))
async def cart___payment_type(callback: types.CallbackQuery):
    paymenttype = callback.data.split('cart___payment_type ')[1]
    cursor.execute(f"UPDATE cart_data SET –°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã='{paymenttype}'")
    if paymenttype == "–ö–∞—Ä—Ç–æ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ":
        paymenttype = "cashoncurier"
    elif paymenttype == "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É":
        paymenttype = "cardtransfer"
    elif paymenttype == "–ù–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞ –º–µ—Å—Ç–µ":
        paymenttype = "cashonplace"
    elif paymenttype == "–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É":
        paymenttype = "cashoncurier"
    elif paymenttype == "–ö–∞—Ä—Ç–æ–π –Ω–∞ –º–µ—Å—Ç–µ":
        paymenttype = "cardonplace"
    cursor.execute(f"SELECT available FROM payments WHERE name='{paymenttype}'")
    if cursor.fetchone()[0] is False:
        await callback.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', show_alert=True)
        return
    paymenttype = callback.data.split('cart___payment_type ')[1]
    cursor.execute(f"UPDATE cart_data SET –°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã='{callback.data.split('cart___payment_type ')[1]}'")
    connect.commit()
    await callback.answer('–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω')
    await callback.message.delete()
    await cart__payment_menu(callback.message)


@dp.callback_query_handler(Text(equals='cart_payment_delivery_time'))
async def cart_payment_delivery_time(callback: types.CallbackQuery):
    if datetime.now().hour > 21:
        await callback.answer(
            "–ú—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–º –í–∞—à –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å 10:00 –¥–æ 22:00. –° –£–≤–∞–∂–µ–Ω–∏–µ–º, –í–∞—à Burgertek!",
            show_alert=True)
        return
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton('–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ', callback_data='cart_delivery_time_fast'))
    keyboard.add(types.InlineKeyboardButton('–£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏', callback_data='cart_delivery_time_pick'))
    await callback.message.edit_text(text='–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(Text(equals='cart_delivery_time_fast'))
async def cart_delivery_time_fast(callback: types.CallbackQuery):
    cursor.execute(f"SELECT –¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏ FROM cart_data WHERE ID='{callback.message.chat.id}'")
    cursor.execute(f"UPDATE cart_data SET –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏='–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ',Difference='0' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    await callback.answer()
    await callback.message.delete()
    await cart__payment_menu(callback.message)


@dp.callback_query_handler(Text(equals='cart_delivery_time_pick'))
async def cart_delivery_time_pick(callback: types.CallbackQuery, state: FSMContext):
    current_time = datetime.now() + timedelta(minutes=45)
    if current_time.hour >= 22 and current_time.minute != 0:
        await callback.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –≤–∞–º –∑–∞–∫–∞–∑, —Ç–∞–∫ –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –Ω–∞—à–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã\n–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è 10.00-22.00', show_alert=True)
        return
    await callback.message.edit_text(
        text=f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ **:**\n–ë–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è {current_time.strftime('%H:%M')}")
    await Time.text.set()
    await callback.answer()


@dp.message_handler(state=Time.text)
async def time(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['time'] = message.text
        current_time = datetime.now() + timedelta(minutes=45)
    if len(data['time']) == 5 and data['time'][0].isdigit() and data['time'][1].isdigit() and data['time'][2] == ':' and \
            data['time'][3].isdigit() and data['time'][4].isdigit():
        hour = int(data['time'][0] + data['time'][1])
        minute = int(data['time'][3] + data['time'][4])
        if current_time.hour <= hour < 24:
            if hour >= 22 and minute != 0:
                await message.answer("–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è 10.00-22.00")
                return
            if current_time.minute <= minute < 60 or (hour > current_time.hour and minute < 60):
                choosing_time = datetime(year=datetime.now().year, month=datetime.now().month, day=datetime.now().day, hour=hour, minute=minute)
                cursor.execute(
                    f"UPDATE cart_data SET –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏='{choosing_time.strftime('%H:%M')}' WHERE ID='{message.chat.id}'")
                connect.commit()
                await state.finish()
                await cart__payment_menu(message)
            else:
                await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        else:
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')


@dp.callback_query_handler(Text(equals='cart_payment_delivery'))
async def cart_payment_delivery(callback: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton('–°–∞–º–æ–≤—ã–≤–æ–∑', callback_data='cart__payment_delivery –°–∞–º–æ–≤—ã–≤–æ–∑'))
    keyboard.add(types.InlineKeyboardButton('–î–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –º–æ–π –∞–¥—Ä–µ—Å',
                                            callback_data='cart__payment_delivery –î–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –º–æ–π –∞–¥—Ä–µ—Å'))
    keyboard.add(
        types.InlineKeyboardButton('–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å', callback_data='cart__payment_delivery –£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å'))
    keyboard.add(
        types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©', callback_data='cart__payment_back'))
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(Text(startswith='cart__payment_delivery'))
async def cart__payment_delivery(callback: types.CallbackQuery):
    delivery_type = callback.data.split('cart__payment_delivery ')[1]
    cursor.execute(
        f"UPDATE cart_data SET –¢–∏–ø_–î–æ—Å—Ç–∞–≤–∫–∏='{delivery_type}',–°–ø–æ—Å–æ–±_–û–ø–ª–∞—Ç—ã='–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',Difference=NULL WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    if delivery_type == '–î–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –º–æ–π –∞–¥—Ä–µ—Å':
        cursor.execute(f"SELECT –ê–¥—Ä–µ—Å FROM login_id WHERE ID='{callback.message.chat.id}'")
        address = cursor.fetchone()[0]
        cursor.execute(
            f"UPDATE cart_data SET –ê–¥—Ä–µ—Å='{address}', –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏='–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' WHERE ID='{callback.message.chat.id}'")
        connect.commit()
        await callback.answer('–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!')
        await callback.message.delete()
        await cart__payment_menu(callback.message)
    elif delivery_type == '–£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å':
        await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞')
        await UserAddress.text.set()
        await callback.answer()
    elif delivery_type == '–°–∞–º–æ–≤—ã–≤–æ–∑':
        cursor.execute(
            f"UPDATE cart_data SET –ê–¥—Ä–µ—Å='–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ', –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏='–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' WHERE ID='{callback.message.chat.id}'")
        connect.commit()
        await callback.message.delete()
        await cart__payment_menu(callback.message)


@dp.message_handler(state=UserAddress.text)
async def user_address(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['address'] = message.text
    await state.finish()
    cursor.execute(
        f"UPDATE cart_data SET –ê–¥—Ä–µ—Å='{data['address']}', –í—Ä–µ–º—è_–î–æ—Å—Ç–∞–≤–∫–∏='–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' WHERE ID='{message.chat.id}'")
    connect.commit()
    await message.answer('–ê–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!')
    await cart__payment_menu(message)


@dp.callback_query_handler(Text(equals='cart_payment_comment'))
async def cart_payment_comment(callback: types.CallbackQuery):
    await callback.message.edit_text(text='–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:')
    await Comment.text.set()
    await callback.answer()


@dp.message_handler(state=Comment.text)
async def comment(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['comment'] = message.text
    await state.finish()
    cursor.execute(f"UPDATE cart_data SET –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π='{data['comment']}' WHERE ID='{message.chat.id}'")
    connect.commit()
    await cart__payment_menu(message)


@dp.callback_query_handler(Text(equals='cart_return'))
async def cart_return(callback: types.CallbackQuery):
    await callback.answer('–í—ã –±—ã–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    await callback.message.delete()
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{callback.message.chat.id}'")
    connect.commit()
    await main_menu(callback.message)


@dp.callback_query_handler(Text(equals='cart_position_delete'))
async def cart_position_delete(callback: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    cursor.execute(f"SELECT Name,Adds,ID FROM cart WHERE user_ID='{callback.message.chat.id}'")
    items = cursor.fetchall()
    for i in range(len(items)):
        if items[i][1] is not None:
            keyboard.add(types.InlineKeyboardButton(f"{items[i][0]} –î–æ–±–∞–≤–∫–∏: {items[i][1]}",
                                                    callback_data=f"cart_del_pos {items[i][2]}"))
        else:
            keyboard.add(types.InlineKeyboardButton(f"{items[i][0]}", callback_data=f"cart_del_pos {items[i][2]}"))
    keyboard.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="back_to_cart_list"))
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(Text(equals='back_to_cart_list'))
async def back_to_cart_list(callback: types.CallbackQuery):
    await callback.answer("–í—ã –±—ã–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É")
    await callback.message.delete()
    await cart(callback.message)


@dp.callback_query_handler(Text(startswith='cart_del_pos'))
async def cart_del_pos(callback: types.CallbackQuery):
    cursor.execute(f"SELECT Name,Adds,ID FROM cart WHERE user_ID='{callback.message.chat.id}'")
    if len(cursor.fetchall()) == 1:
        cursor.execute(
            f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{callback.message.chat.id}'")
        connect.commit()
    cursor.execute(f"DELETE FROM cart WHERE ID='{callback.data.split('cart_del_pos ')[1]}'")
    connect.commit()
    await callback.answer('–ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')
    await cart_position_delete(callback)


@dp.callback_query_handler(Text(equals='cart_clear'))
async def cart_clear(callback: types.CallbackQuery):
    cursor.execute(f"DELETE FROM cart WHERE user_ID='{callback.message.chat.id}'")
    connect.commit()
    await callback.answer('–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!')
    await callback.message.delete()
    await main_menu(callback.message)
    cursor.execute(
        f"UPDATE login_id SET menuMessage='NULL', menuStatus='NULL' WHERE ID='{callback.message.chat.id}'")
    connect.commit()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
